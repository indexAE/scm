{"ast":null,"code":"import \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.date.to-json.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport { usePermissionStore } from '../stores/permission';\n\n// 检查用户是否登录\nexport function isLoggedIn() {\n  return !!localStorage.getItem('token');\n}\n\n// 获取用户角色\nexport function getUserRole() {\n  return localStorage.getItem('userRole') || 'user';\n}\n\n// 检查是否是管理员\nexport function isAdmin() {\n  return getUserRole() === 'admin';\n}\n\n// 检查是否有指定权限\nexport function hasPermission(permission) {\n  var permissionStore = usePermissionStore();\n  return permissionStore.hasPermission(permission);\n}\n\n// 检查是否有指定权限中的任意一个\nexport function hasAnyPermission(permissions) {\n  var permissionStore = usePermissionStore();\n  return permissionStore.hasAnyPermission(permissions);\n}\n\n// 检查是否有指定的所有权限\nexport function hasAllPermissions(permissions) {\n  var permissionStore = usePermissionStore();\n  return permissionStore.hasAllPermissions(permissions);\n}\n\n// 获取用户权限列表\nexport function getUserPermissions() {\n  var permissionsStr = localStorage.getItem('userPermissions');\n  return permissionsStr ? JSON.parse(permissionsStr) : [];\n}\n\n// 保存用户权限\nexport function setUserPermissions(permissions) {\n  localStorage.setItem('userPermissions', JSON.stringify(permissions));\n}\n\n// 保存用户角色\nexport function setUserRole(role) {\n  localStorage.setItem('userRole', role);\n}\n\n// 清除权限数据\nexport function clearAuthData() {\n  localStorage.removeItem('token');\n  localStorage.removeItem('userRole');\n  localStorage.removeItem('userPermissions');\n  localStorage.removeItem('userId');\n  localStorage.removeItem('username');\n}\n\n// 初始化权限数据\nexport function initAuthData(userData) {\n  var token = userData.token,\n    role = userData.role,\n    permissions = userData.permissions,\n    id = userData.id,\n    username = userData.username;\n  localStorage.setItem('token', token);\n  localStorage.setItem('userRole', role);\n  localStorage.setItem('userPermissions', JSON.stringify(permissions));\n  localStorage.setItem('userId', id);\n  localStorage.setItem('username', username);\n  var permissionStore = usePermissionStore();\n  permissionStore.initPermissions();\n}\n\n// 检查路由是否需要权限\nexport function checkRoutePermission(route, permissionMap) {\n  // 如果是白名单路由，直接返回true\n  if (['/login', '/register', '/404', '/403'].includes(route)) {\n    return true;\n  }\n\n  // 如果是首页，直接返回true\n  if (route === '/dashboard') {\n    return true;\n  }\n\n  // 如果是管理员，直接返回true\n  if (isAdmin()) {\n    return true;\n  }\n\n  // 获取路由所需权限\n  var requiredPermissions = permissionMap[route];\n\n  // 如果路由不需要权限，返回true\n  if (!requiredPermissions) {\n    return true;\n  }\n\n  // 检查是否有权限\n  return hasAnyPermission(requiredPermissions);\n}\n\n// 过滤菜单项\nexport function filterMenuItems(menuItems, permissionMap) {\n  return menuItems.filter(function (item) {\n    // 如果有子菜单，递归过滤\n    if (item.children) {\n      item.children = filterMenuItems(item.children, permissionMap);\n      return item.children.length > 0;\n    }\n\n    // 检查当前菜单项是否有权限访问\n    return checkRoutePermission(item.path, permissionMap);\n  });\n}","map":{"version":3,"names":["usePermissionStore","isLoggedIn","localStorage","getItem","getUserRole","isAdmin","hasPermission","permission","permissionStore","hasAnyPermission","permissions","hasAllPermissions","getUserPermissions","permissionsStr","JSON","parse","setUserPermissions","setItem","stringify","setUserRole","role","clearAuthData","removeItem","initAuthData","userData","token","id","username","initPermissions","checkRoutePermission","route","permissionMap","includes","requiredPermissions","filterMenuItems","menuItems","filter","item","children","length","path"],"sources":["C:/Users/indexae/Desktop/scm退货/scm/frontend/src/utils/auth.js"],"sourcesContent":["import { usePermissionStore } from '../stores/permission'\r\n\r\n// 检查用户是否登录\r\nexport function isLoggedIn() {\r\n  return !!localStorage.getItem('token')\r\n}\r\n\r\n// 获取用户角色\r\nexport function getUserRole() {\r\n  return localStorage.getItem('userRole') || 'user'\r\n}\r\n\r\n// 检查是否是管理员\r\nexport function isAdmin() {\r\n  return getUserRole() === 'admin'\r\n}\r\n\r\n// 检查是否有指定权限\r\nexport function hasPermission(permission) {\r\n  const permissionStore = usePermissionStore()\r\n  return permissionStore.hasPermission(permission)\r\n}\r\n\r\n// 检查是否有指定权限中的任意一个\r\nexport function hasAnyPermission(permissions) {\r\n  const permissionStore = usePermissionStore()\r\n  return permissionStore.hasAnyPermission(permissions)\r\n}\r\n\r\n// 检查是否有指定的所有权限\r\nexport function hasAllPermissions(permissions) {\r\n  const permissionStore = usePermissionStore()\r\n  return permissionStore.hasAllPermissions(permissions)\r\n}\r\n\r\n// 获取用户权限列表\r\nexport function getUserPermissions() {\r\n  const permissionsStr = localStorage.getItem('userPermissions')\r\n  return permissionsStr ? JSON.parse(permissionsStr) : []\r\n}\r\n\r\n// 保存用户权限\r\nexport function setUserPermissions(permissions) {\r\n  localStorage.setItem('userPermissions', JSON.stringify(permissions))\r\n}\r\n\r\n// 保存用户角色\r\nexport function setUserRole(role) {\r\n  localStorage.setItem('userRole', role)\r\n}\r\n\r\n// 清除权限数据\r\nexport function clearAuthData() {\r\n  localStorage.removeItem('token')\r\n  localStorage.removeItem('userRole')\r\n  localStorage.removeItem('userPermissions')\r\n  localStorage.removeItem('userId')\r\n  localStorage.removeItem('username')\r\n}\r\n\r\n// 初始化权限数据\r\nexport function initAuthData(userData) {\r\n  const { token, role, permissions, id, username } = userData\r\n  \r\n  localStorage.setItem('token', token)\r\n  localStorage.setItem('userRole', role)\r\n  localStorage.setItem('userPermissions', JSON.stringify(permissions))\r\n  localStorage.setItem('userId', id)\r\n  localStorage.setItem('username', username)\r\n  \r\n  const permissionStore = usePermissionStore()\r\n  permissionStore.initPermissions()\r\n}\r\n\r\n// 检查路由是否需要权限\r\nexport function checkRoutePermission(route, permissionMap) {\r\n  // 如果是白名单路由，直接返回true\r\n  if (['/login', '/register', '/404', '/403'].includes(route)) {\r\n    return true\r\n  }\r\n  \r\n  // 如果是首页，直接返回true\r\n  if (route === '/dashboard') {\r\n    return true\r\n  }\r\n  \r\n  // 如果是管理员，直接返回true\r\n  if (isAdmin()) {\r\n    return true\r\n  }\r\n  \r\n  // 获取路由所需权限\r\n  const requiredPermissions = permissionMap[route]\r\n  \r\n  // 如果路由不需要权限，返回true\r\n  if (!requiredPermissions) {\r\n    return true\r\n  }\r\n  \r\n  // 检查是否有权限\r\n  return hasAnyPermission(requiredPermissions)\r\n}\r\n\r\n// 过滤菜单项\r\nexport function filterMenuItems(menuItems, permissionMap) {\r\n  return menuItems.filter(item => {\r\n    // 如果有子菜单，递归过滤\r\n    if (item.children) {\r\n      item.children = filterMenuItems(item.children, permissionMap)\r\n      return item.children.length > 0\r\n    }\r\n    \r\n    // 检查当前菜单项是否有权限访问\r\n    return checkRoutePermission(item.path, permissionMap)\r\n  })\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}