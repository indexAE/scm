{"ast":null,"code":"import \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport { createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createBlock as _createBlock, createElementBlock as _createElementBlock } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"category-manage\"\n};\nvar _hoisted_2 = {\n  \"class\": \"card-header\"\n};\nvar _hoisted_3 = {\n  \"class\": \"dialog-footer\"\n};\nvar _hoisted_4 = {\n  \"class\": \"dialog-footer\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_el_button = _resolveComponent(\"el-button\");\n  var _component_el_table_column = _resolveComponent(\"el-table-column\");\n  var _component_el_tag = _resolveComponent(\"el-tag\");\n  var _component_el_table = _resolveComponent(\"el-table\");\n  var _component_el_card = _resolveComponent(\"el-card\");\n  var _component_el_cascader = _resolveComponent(\"el-cascader\");\n  var _component_el_form_item = _resolveComponent(\"el-form-item\");\n  var _component_el_input = _resolveComponent(\"el-input\");\n  var _component_el_input_number = _resolveComponent(\"el-input-number\");\n  var _component_el_form = _resolveComponent(\"el-form\");\n  var _component_el_dialog = _resolveComponent(\"el-dialog\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_el_card, {\n    \"class\": \"box-card\"\n  }, {\n    header: _withCtx(function () {\n      return [_createElementVNode(\"div\", _hoisted_2, [_cache[11] || (_cache[11] = _createElementVNode(\"span\", null, \"商品分类管理\", -1 /* HOISTED */)), _createElementVNode(\"div\", null, [_createVNode(_component_el_button, {\n        type: \"primary\",\n        onClick: $setup.handleAdd\n      }, {\n        \"default\": _withCtx(function () {\n          return _cache[9] || (_cache[9] = [_createTextVNode(\"新增分类\")]);\n        }),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_el_button, {\n        type: \"success\",\n        onClick: $setup.createDefaultCategories\n      }, {\n        \"default\": _withCtx(function () {\n          return _cache[10] || (_cache[10] = [_createTextVNode(\"添加测试数据\")]);\n        }),\n        _: 1 /* STABLE */\n      })])])];\n    }),\n    \"default\": _withCtx(function () {\n      return [_createVNode(_component_el_table, {\n        data: $setup.categoryData,\n        \"row-key\": \"id\",\n        border: \"\",\n        \"tree-props\": {\n          children: 'children'\n        }\n      }, {\n        \"default\": _withCtx(function () {\n          return [_createVNode(_component_el_table_column, {\n            prop: \"name\",\n            label: \"分类名称\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"code\",\n            label: \"分类编码\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"sort\",\n            label: \"排序\",\n            width: \"100\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"status\",\n            label: \"状态\",\n            width: \"100\"\n          }, {\n            \"default\": _withCtx(function (scope) {\n              return [_createVNode(_component_el_tag, {\n                type: scope.row.status === 'enabled' ? 'success' : 'danger'\n              }, {\n                \"default\": _withCtx(function () {\n                  return [_createTextVNode(_toDisplayString(scope.row.status === 'enabled' ? '启用' : '禁用'), 1 /* TEXT */)];\n                }),\n                _: 2 /* DYNAMIC */\n              }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"type\"])];\n            }),\n            _: 1 /* STABLE */\n          }), _createVNode(_component_el_table_column, {\n            label: \"操作\",\n            width: \"300\"\n          }, {\n            \"default\": _withCtx(function (scope) {\n              return [_createVNode(_component_el_button, {\n                link: \"\",\n                onClick: function onClick($event) {\n                  return $setup.handleEdit(scope.row);\n                }\n              }, {\n                \"default\": _withCtx(function () {\n                  return _cache[12] || (_cache[12] = [_createTextVNode(\"编辑\")]);\n                }),\n                _: 2 /* DYNAMIC */\n              }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"onClick\"]), _createVNode(_component_el_button, {\n                type: scope.row.status === 'enabled' ? 'danger' : 'success',\n                link: \"\",\n                onClick: function onClick($event) {\n                  return $setup.handleToggleStatus(scope.row);\n                }\n              }, {\n                \"default\": _withCtx(function () {\n                  return [_createTextVNode(_toDisplayString(scope.row.status === 'enabled' ? '禁用' : '启用'), 1 /* TEXT */)];\n                }),\n                _: 2 /* DYNAMIC */\n              }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"type\", \"onClick\"]), !scope.row.parentId ? (_openBlock(), _createBlock(_component_el_button, {\n                key: 0,\n                type: \"primary\",\n                link: \"\",\n                onClick: function onClick($event) {\n                  return $setup.handleSetParent(scope.row);\n                }\n              }, {\n                \"default\": _withCtx(function () {\n                  return _cache[13] || (_cache[13] = [_createTextVNode(\" 设为上级分类 \")]);\n                }),\n                _: 2 /* DYNAMIC */\n              }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"onClick\"])) : _createCommentVNode(\"v-if\", true)];\n            }),\n            _: 1 /* STABLE */\n          })];\n        }),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"data\"])];\n    }),\n    _: 1 /* STABLE */\n  }), _createCommentVNode(\" 分类表单对话框 \"), _createVNode(_component_el_dialog, {\n    title: $setup.isEdit ? '编辑分类' : '新增分类',\n    modelValue: $setup.dialogVisible,\n    \"onUpdate:modelValue\": _cache[5] || (_cache[5] = function ($event) {\n      return $setup.dialogVisible = $event;\n    }),\n    width: \"500px\"\n  }, {\n    footer: _withCtx(function () {\n      return [_createElementVNode(\"span\", _hoisted_3, [_createVNode(_component_el_button, {\n        onClick: _cache[4] || (_cache[4] = function ($event) {\n          return $setup.dialogVisible = false;\n        })\n      }, {\n        \"default\": _withCtx(function () {\n          return _cache[14] || (_cache[14] = [_createTextVNode(\"取消\")]);\n        }),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_el_button, {\n        type: \"primary\",\n        onClick: $setup.handleSubmit\n      }, {\n        \"default\": _withCtx(function () {\n          return _cache[15] || (_cache[15] = [_createTextVNode(\"确定\")]);\n        }),\n        _: 1 /* STABLE */\n      })])];\n    }),\n    \"default\": _withCtx(function () {\n      return [_createVNode(_component_el_form, {\n        ref: \"formRef\",\n        model: $setup.form,\n        rules: $setup.rules,\n        \"label-width\": \"100px\"\n      }, {\n        \"default\": _withCtx(function () {\n          return [_createVNode(_component_el_form_item, {\n            label: \"上级分类\"\n          }, {\n            \"default\": _withCtx(function () {\n              return [_createVNode(_component_el_cascader, {\n                modelValue: $setup.form.parentId,\n                \"onUpdate:modelValue\": _cache[0] || (_cache[0] = function ($event) {\n                  return $setup.form.parentId = $event;\n                }),\n                options: $setup.isEdit ? $setup.filterCategories($setup.categoryData.value, $setup.form.id) : $setup.categoryData,\n                props: {\n                  checkStrictly: true,\n                  label: 'name',\n                  value: 'id',\n                  emitPath: false,\n                  expandTrigger: 'hover'\n                },\n                clearable: \"\",\n                placeholder: \"请选择上级分类\"\n              }, null, 8 /* PROPS */, [\"modelValue\", \"options\"])];\n            }),\n            _: 1 /* STABLE */\n          }), _createVNode(_component_el_form_item, {\n            label: \"分类名称\",\n            prop: \"name\"\n          }, {\n            \"default\": _withCtx(function () {\n              return [_createVNode(_component_el_input, {\n                modelValue: $setup.form.name,\n                \"onUpdate:modelValue\": _cache[1] || (_cache[1] = function ($event) {\n                  return $setup.form.name = $event;\n                }),\n                placeholder: \"请输入分类名称\"\n              }, null, 8 /* PROPS */, [\"modelValue\"])];\n            }),\n            _: 1 /* STABLE */\n          }), _createVNode(_component_el_form_item, {\n            label: \"分类编码\",\n            prop: \"code\"\n          }, {\n            \"default\": _withCtx(function () {\n              return [_createVNode(_component_el_input, {\n                modelValue: $setup.form.code,\n                \"onUpdate:modelValue\": _cache[2] || (_cache[2] = function ($event) {\n                  return $setup.form.code = $event;\n                }),\n                placeholder: \"请输入分类编码\"\n              }, null, 8 /* PROPS */, [\"modelValue\"])];\n            }),\n            _: 1 /* STABLE */\n          }), _createVNode(_component_el_form_item, {\n            label: \"排序\",\n            prop: \"sort\"\n          }, {\n            \"default\": _withCtx(function () {\n              return [_createVNode(_component_el_input_number, {\n                modelValue: $setup.form.sort,\n                \"onUpdate:modelValue\": _cache[3] || (_cache[3] = function ($event) {\n                  return $setup.form.sort = $event;\n                }),\n                min: 0\n              }, null, 8 /* PROPS */, [\"modelValue\"])];\n            }),\n            _: 1 /* STABLE */\n          })];\n        }),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"model\"])];\n    }),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"title\", \"modelValue\"]), _createCommentVNode(\" 设置上级分类对话框 \"), _createVNode(_component_el_dialog, {\n    title: \"设置上级分类\",\n    modelValue: $setup.setParentDialogVisible,\n    \"onUpdate:modelValue\": _cache[8] || (_cache[8] = function ($event) {\n      return $setup.setParentDialogVisible = $event;\n    }),\n    width: \"500px\"\n  }, {\n    footer: _withCtx(function () {\n      return [_createElementVNode(\"span\", _hoisted_4, [_createVNode(_component_el_button, {\n        onClick: _cache[7] || (_cache[7] = function ($event) {\n          return $setup.setParentDialogVisible = false;\n        })\n      }, {\n        \"default\": _withCtx(function () {\n          return _cache[16] || (_cache[16] = [_createTextVNode(\"取消\")]);\n        }),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_el_button, {\n        type: \"primary\",\n        onClick: $setup.handleSetParentSubmit\n      }, {\n        \"default\": _withCtx(function () {\n          return _cache[17] || (_cache[17] = [_createTextVNode(\"确定\")]);\n        }),\n        _: 1 /* STABLE */\n      })])];\n    }),\n    \"default\": _withCtx(function () {\n      return [_createVNode(_component_el_form, {\n        \"label-width\": \"100px\"\n      }, {\n        \"default\": _withCtx(function () {\n          return [_createVNode(_component_el_form_item, {\n            label: \"当前分类\"\n          }, {\n            \"default\": _withCtx(function () {\n              var _$setup$currentCatego;\n              return [_createVNode(_component_el_input, {\n                value: (_$setup$currentCatego = $setup.currentCategory) === null || _$setup$currentCatego === void 0 ? void 0 : _$setup$currentCatego.name,\n                disabled: \"\"\n              }, null, 8 /* PROPS */, [\"value\"])];\n            }),\n            _: 1 /* STABLE */\n          }), _createVNode(_component_el_form_item, {\n            label: \"上级分类\"\n          }, {\n            \"default\": _withCtx(function () {\n              return [_createVNode(_component_el_cascader, {\n                modelValue: $setup.selectedParentId,\n                \"onUpdate:modelValue\": _cache[6] || (_cache[6] = function ($event) {\n                  return $setup.selectedParentId = $event;\n                }),\n                options: $setup.categoryData,\n                props: {\n                  checkStrictly: true,\n                  label: 'name',\n                  value: 'id',\n                  emitPath: false,\n                  expandTrigger: 'hover'\n                },\n                clearable: \"\",\n                placeholder: \"请选择上级分类\"\n              }, null, 8 /* PROPS */, [\"modelValue\", \"options\"])];\n            }),\n            _: 1 /* STABLE */\n          })];\n        }),\n        _: 1 /* STABLE */\n      })];\n    }),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\"])]);\n}","map":{"version":3,"names":["_createElementBlock","_hoisted_1","_createVNode","_component_el_card","header","_withCtx","_createElementVNode","_hoisted_2","_component_el_button","type","onClick","$setup","handleAdd","_cache","_createTextVNode","_","createDefaultCategories","_component_el_table","data","categoryData","border","children","_component_el_table_column","prop","label","width","scope","_component_el_tag","row","status","_toDisplayString","link","$event","handleEdit","handleToggleStatus","parentId","_createBlock","key","handleSetParent","_createCommentVNode","_component_el_dialog","title","isEdit","modelValue","dialogVisible","footer","_hoisted_3","handleSubmit","_component_el_form","ref","model","form","rules","_component_el_form_item","_component_el_cascader","options","filterCategories","value","id","props","clearable","placeholder","_component_el_input","name","code","_component_el_input_number","sort","min","setParentDialogVisible","_hoisted_4","handleSetParentSubmit","_$setup$currentCatego","currentCategory","disabled","selectedParentId"],"sources":["C:\\Users\\indexae\\Desktop\\scm\\scm\\frontend\\src\\views\\product\\category\\index.vue"],"sourcesContent":["<template>\r\n  <div class=\"category-manage\">\r\n    <el-card class=\"box-card\">\r\n      <template #header>\r\n        <div class=\"card-header\">\r\n          <span>商品分类管理</span>\r\n          <div>\r\n            <el-button type=\"primary\" @click=\"handleAdd\">新增分类</el-button>\r\n            <el-button type=\"success\" @click=\"createDefaultCategories\">添加测试数据</el-button>\r\n          </div>\r\n        </div>\r\n      </template>\r\n\r\n      <!-- 分类树形表格 -->\r\n      <el-table\r\n        :data=\"categoryData\"\r\n        row-key=\"id\"\r\n        border\r\n        :tree-props=\"{ children: 'children' }\"\r\n      >\r\n        <el-table-column prop=\"name\" label=\"分类名称\" />\r\n        <el-table-column prop=\"code\" label=\"分类编码\" />\r\n        <el-table-column prop=\"sort\" label=\"排序\" width=\"100\" />\r\n        <el-table-column prop=\"status\" label=\"状态\" width=\"100\">\r\n          <template #default=\"scope\">\r\n            <el-tag :type=\"scope.row.status === 'enabled' ? 'success' : 'danger'\">\r\n              {{ scope.row.status === 'enabled' ? '启用' : '禁用' }}\r\n            </el-tag>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column label=\"操作\" width=\"300\">\r\n          <template #default=\"scope\">\r\n            <el-button link @click=\"handleEdit(scope.row)\">编辑</el-button>\r\n            <el-button\r\n              :type=\"scope.row.status === 'enabled' ? 'danger' : 'success'\"\r\n              link\r\n              @click=\"handleToggleStatus(scope.row)\"\r\n            >\r\n              {{ scope.row.status === 'enabled' ? '禁用' : '启用' }}\r\n            </el-button>\r\n            <el-button \r\n              type=\"primary\" \r\n              link \r\n              @click=\"handleSetParent(scope.row)\"\r\n              v-if=\"!scope.row.parentId\"\r\n            >\r\n              设为上级分类\r\n            </el-button>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n    </el-card>\r\n\r\n    <!-- 分类表单对话框 -->\r\n    <el-dialog\r\n      :title=\"isEdit ? '编辑分类' : '新增分类'\"\r\n      v-model=\"dialogVisible\"\r\n      width=\"500px\"\r\n    >\r\n      <el-form ref=\"formRef\" :model=\"form\" :rules=\"rules\" label-width=\"100px\">\r\n        <el-form-item label=\"上级分类\">\r\n          <el-cascader\r\n            v-model=\"form.parentId\"\r\n            :options=\"isEdit ? filterCategories(categoryData.value, form.id) : categoryData\"\r\n            :props=\"{\r\n              checkStrictly: true,\r\n              label: 'name',\r\n              value: 'id',\r\n              emitPath: false,\r\n              expandTrigger: 'hover'\r\n            }\"\r\n            clearable\r\n            placeholder=\"请选择上级分类\"\r\n          />\r\n        </el-form-item>\r\n        <el-form-item label=\"分类名称\" prop=\"name\">\r\n          <el-input v-model=\"form.name\" placeholder=\"请输入分类名称\" />\r\n        </el-form-item>\r\n        <el-form-item label=\"分类编码\" prop=\"code\">\r\n          <el-input v-model=\"form.code\" placeholder=\"请输入分类编码\" />\r\n        </el-form-item>\r\n        <el-form-item label=\"排序\" prop=\"sort\">\r\n          <el-input-number v-model=\"form.sort\" :min=\"0\" />\r\n        </el-form-item>\r\n      </el-form>\r\n      <template #footer>\r\n        <span class=\"dialog-footer\">\r\n          <el-button @click=\"dialogVisible = false\">取消</el-button>\r\n          <el-button type=\"primary\" @click=\"handleSubmit\">确定</el-button>\r\n        </span>\r\n      </template>\r\n    </el-dialog>\r\n\r\n    <!-- 设置上级分类对话框 -->\r\n    <el-dialog\r\n      title=\"设置上级分类\"\r\n      v-model=\"setParentDialogVisible\"\r\n      width=\"500px\"\r\n    >\r\n      <el-form label-width=\"100px\">\r\n        <el-form-item label=\"当前分类\">\r\n          <el-input :value=\"currentCategory?.name\" disabled />\r\n        </el-form-item>\r\n        <el-form-item label=\"上级分类\">\r\n          <el-cascader\r\n            v-model=\"selectedParentId\"\r\n            :options=\"categoryData\"\r\n            :props=\"{\r\n              checkStrictly: true,\r\n              label: 'name',\r\n              value: 'id',\r\n              emitPath: false,\r\n              expandTrigger: 'hover'\r\n            }\"\r\n            clearable\r\n            placeholder=\"请选择上级分类\"\r\n          />\r\n        </el-form-item>\r\n      </el-form>\r\n      <template #footer>\r\n        <span class=\"dialog-footer\">\r\n          <el-button @click=\"setParentDialogVisible = false\">取消</el-button>\r\n          <el-button type=\"primary\" @click=\"handleSetParentSubmit\">确定</el-button>\r\n        </span>\r\n      </template>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, reactive, onMounted } from 'vue'\r\nimport { ElMessage, ElMessageBox } from 'element-plus'\r\n\r\n// 分类数据\r\nconst categoryData = ref([])\r\nconst dialogVisible = ref(false)\r\nconst isEdit = ref(false)\r\nconst formRef = ref(null)\r\n\r\n// 表单数据\r\nconst form = reactive({\r\n  parentId: null,\r\n  name: '',\r\n  code: '',\r\n  sort: 0\r\n})\r\n\r\n// 表单验证规则\r\nconst rules = {\r\n  name: [\r\n    { required: true, message: '请输入分类名称', trigger: 'blur' }\r\n  ],\r\n  code: [\r\n    { required: true, message: '请输入分类编码', trigger: 'blur' }\r\n  ]\r\n}\r\n\r\n// 获取分类数据\r\nconst getCategoryData = async () => {\r\n  try {\r\n    const response = await fetch('/api/product/categories/tree')\r\n    const result = await response.json()\r\n    console.log('Response:', result)\r\n    \r\n    if (result.code === 0) {\r\n      categoryData.value = result.data || []\r\n    } else {\r\n      ElMessage.error(result.message || '获取分类数据失败')\r\n    }\r\n  } catch (error) {\r\n    console.error('获取分类数据失败:', error)\r\n    ElMessage.error('获取分类数据失败')\r\n  }\r\n}\r\n\r\n// 新增分类\r\nconst handleAdd = () => {\r\n  isEdit.value = false\r\n  form.parentId = null\r\n  form.name = ''\r\n  form.code = ''\r\n  form.sort = 0\r\n  dialogVisible.value = true\r\n}\r\n\r\n// 编辑分类\r\nconst handleEdit = (row) => {\r\n  isEdit.value = true\r\n  form.id = row.id\r\n  form.parentId = row.parentId\r\n  form.name = row.name\r\n  form.code = row.code\r\n  form.sort = row.sort\r\n  dialogVisible.value = true\r\n}\r\n\r\n// 切换状态\r\nconst handleToggleStatus = async (row) => {\r\n  const action = row.status === 'enabled' ? '禁用' : '启用'\r\n  try {\r\n    await ElMessageBox.confirm(\r\n      `确认${action}该分类吗？`,\r\n      '提示',\r\n      {\r\n        confirmButtonText: '确定',\r\n        cancelButtonText: '取消',\r\n        type: 'warning'\r\n      }\r\n    )\r\n    \r\n    const response = await fetch(`/api/product/categories/${row.id}/status`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        status: row.status === 'enabled' ? 'disabled' : 'enabled'\r\n      })\r\n    })\r\n    const result = await response.json()\r\n    if (result.code === 0) {\r\n      ElMessage.success('状态更新成功')\r\n      await getCategoryData()\r\n    } else {\r\n      ElMessage.error(result.message || '状态更新失败')\r\n    }\r\n  } catch (error) {\r\n    if (error !== 'cancel') {\r\n      console.error('更新状态失败:', error)\r\n      ElMessage.error('更新状态失败')\r\n    }\r\n  }\r\n}\r\n\r\n// 提交表单\r\nconst handleSubmit = async () => {\r\n  if (!formRef.value) return\r\n  \r\n  await formRef.value.validate(async (valid) => {\r\n    if (valid) {\r\n      try {\r\n        const url = isEdit.value \r\n          ? `/api/product/categories/${form.id}`\r\n          : '/api/product/categories'\r\n        \r\n        const method = isEdit.value ? 'PUT' : 'POST'\r\n        const response = await fetch(url, {\r\n          method,\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify(form)\r\n        })\r\n\r\n        const result = await response.json()\r\n        if (result.code === 0) {\r\n          ElMessage.success(isEdit.value ? '更新成功' : '创建成功')\r\n          dialogVisible.value = false\r\n          await getCategoryData()\r\n        } else {\r\n          ElMessage.error(result.message || (isEdit.value ? '更新失败' : '创建失败'))\r\n        }\r\n      } catch (error) {\r\n        console.error(isEdit.value ? '更新分类失败:' : '创建分类失败:', error)\r\n        ElMessage.error(isEdit.value ? '更新失败' : '创建失败')\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\n// 过滤分类选项，排除当前分类及其子分类\r\nconst filterCategories = (categories, currentId) => {\r\n  if (!categories) return []\r\n  \r\n  // 递归查找所有子分类ID\r\n  const findChildrenIds = (category) => {\r\n    let ids = [category.id]\r\n    if (category.children) {\r\n      category.children.forEach(child => {\r\n        ids = ids.concat(findChildrenIds(child))\r\n      })\r\n    }\r\n    return ids\r\n  }\r\n\r\n  // 深拷贝分类数据\r\n  const cloneCategories = JSON.parse(JSON.stringify(categories))\r\n  \r\n  // 获取当前分类及其所有子分类的ID\r\n  const excludeIds = currentId ? cloneCategories\r\n    .filter(item => item.id === currentId)\r\n    .reduce((ids, item) => ids.concat(findChildrenIds(item)), [])\r\n    : []\r\n\r\n  // 过滤掉当前分类及其子分类\r\n  return cloneCategories.filter(item => !excludeIds.includes(item.id))\r\n}\r\n\r\n// 设置上级分类对话框\r\nconst setParentDialogVisible = ref(false)\r\nconst currentCategory = ref(null)\r\nconst selectedParentId = ref(null)\r\n\r\n// 处理设置上级分类\r\nconst handleSetParent = (row) => {\r\n  currentCategory.value = row\r\n  selectedParentId.value = null\r\n  setParentDialogVisible.value = true\r\n}\r\n\r\n// 提交设置上级分类\r\nconst handleSetParentSubmit = async () => {\r\n  if (!currentCategory.value || !selectedParentId.value) return\r\n  \r\n  try {\r\n    const response = await fetch(`/api/product/categories/${currentCategory.value.id}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        id: currentCategory.value.id,\r\n        parentId: selectedParentId.value,\r\n        name: currentCategory.value.name,\r\n        code: currentCategory.value.code,\r\n        sort: currentCategory.value.sort,\r\n        status: currentCategory.value.status,\r\n        updateBy: 1 // 暂时hardcode为1,实际应该从登录用户信息中获取\r\n      })\r\n    })\r\n\r\n    const result = await response.json()\r\n    if (result.code === 0) {\r\n      ElMessage.success('设置上级分类成功')\r\n      setParentDialogVisible.value = false\r\n      await getCategoryData()\r\n    } else {\r\n      ElMessage.error(result.message || '设置上级分类失败')\r\n    }\r\n  } catch (error) {\r\n    console.error('设置上级分类失败:', error)\r\n    ElMessage.error('设置上级分类失败')\r\n  }\r\n}\r\n\r\n// 创建默认分类数据\r\nconst createDefaultCategories = async () => {\r\n  try {\r\n    // 创建电子产品分类\r\n    const electronics = {\r\n      name: '电子产品',\r\n      code: 'ELE001',\r\n      sort: 1,\r\n      status: 'enabled'\r\n    }\r\n    const electronicsResponse = await fetch('/api/product/categories', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(electronics)\r\n    })\r\n    const electronicsResult = await electronicsResponse.json()\r\n    \r\n    if (electronicsResult.code !== 0) {\r\n      throw new Error(electronicsResult.message || '创建电子产品分类失败')\r\n    }\r\n\r\n    // 获取最新的分类列表\r\n    await getCategoryData()\r\n    const electronicsCategory = categoryData.value.find(c => c.code === 'ELE001')\r\n    if (!electronicsCategory) {\r\n      throw new Error('无法找到刚创建的电子产品分类')\r\n    }\r\n\r\n    // 创建电子产品的子分类\r\n    const phones = {\r\n      name: '手机',\r\n      code: 'ELE002',\r\n      parentId: electronicsCategory.id,\r\n      sort: 1,\r\n      status: 'enabled'\r\n    }\r\n    const phonesResponse = await fetch('/api/product/categories', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(phones)\r\n    })\r\n    const phonesResult = await phonesResponse.json()\r\n    if (phonesResult.code !== 0) {\r\n      throw new Error(phonesResult.message || '创建手机分类失败')\r\n    }\r\n\r\n    // 创建服装分类\r\n    const clothing = {\r\n      name: '服装',\r\n      code: 'CLO001',\r\n      sort: 2,\r\n      status: 'enabled'\r\n    }\r\n    const clothingResponse = await fetch('/api/product/categories', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(clothing)\r\n    })\r\n    const clothingResult = await clothingResponse.json()\r\n    \r\n    if (clothingResult.code !== 0) {\r\n      throw new Error(clothingResult.message || '创建服装分类失败')\r\n    }\r\n\r\n    // 获取最新的分类列表\r\n    await getCategoryData()\r\n    const clothingCategory = categoryData.value.find(c => c.code === 'CLO001')\r\n    if (!clothingCategory) {\r\n      throw new Error('无法找到刚创建的服装分类')\r\n    }\r\n\r\n    // 创建服装的子分类\r\n    const shirts = {\r\n      name: '上衣',\r\n      code: 'CLO002',\r\n      parentId: clothingCategory.id,\r\n      sort: 1,\r\n      status: 'enabled'\r\n    }\r\n    const shirtsResponse = await fetch('/api/product/categories', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(shirts)\r\n    })\r\n    const shirtsResult = await shirtsResponse.json()\r\n    if (shirtsResult.code !== 0) {\r\n      throw new Error(shirtsResult.message || '创建上衣分类失败')\r\n    }\r\n\r\n    ElMessage.success('测试数据添加成功')\r\n    await getCategoryData()\r\n  } catch (error) {\r\n    console.error('添加测试数据失败:', error)\r\n    ElMessage.error(error.message || '添加测试数据失败')\r\n  }\r\n}\r\n\r\nonMounted(() => {\r\n  getCategoryData()\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.category-manage {\r\n  height: 100%;\r\n}\r\n\r\n.card-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.dialog-footer {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  gap: 10px;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}