{"ast":null,"code":"import _toConsumableArray from \"C:/Users/indexae/Desktop/scm\\u9000\\u8D27/scm/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.every.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.date.to-json.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.every.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { defineStore } from 'pinia';\n\n// 定义权限状态管理\nexport var usePermissionStore = defineStore('permission', {\n  state: function state() {\n    return {\n      // 所有权限列表\n      permissions: [],\n      // 角色权限映射\n      rolePermissions: {\n        admin: ['*'],\n        // 管理员拥有所有权限\n        user: ['VIEW_DASHBOARD', 'VIEW_PROFILE', 'VIEW_PERMISSIONS',\n        // 添加权限管理的查看权限\n        'VIEW_USERS', 'VIEW_ROLES'] // 普通用户基础权限\n      },\n      // 用户权限映射\n      userPermissions: {},\n      // 当前用户权限\n      currentUserPermissions: [],\n      // 当前用户角色\n      currentUserRole: '',\n      // 权限继承关系\n      permissionInheritance: {}\n    };\n  },\n  getters: {\n    // 检查是否有指定权限\n    hasPermission: function hasPermission(state) {\n      return function (permission) {\n        var _state$userPermission;\n        if (state.currentUserRole === 'admin') return true;\n\n        // 检查用户特定权限\n        var userId = localStorage.getItem('userId');\n        if (userId && (_state$userPermission = state.userPermissions[userId]) !== null && _state$userPermission !== void 0 && _state$userPermission.includes(permission)) {\n          return true;\n        }\n\n        // 检查角色权限\n        return state.currentUserPermissions.includes(permission);\n      };\n    },\n    // 检查是否有指定权限中的任意一个\n    hasAnyPermission: function hasAnyPermission(state) {\n      return function (permissions) {\n        if (state.currentUserRole === 'admin') return true;\n\n        // 检查用户特定权限\n        var userId = localStorage.getItem('userId');\n        if (userId) {\n          var userPerms = state.userPermissions[userId] || [];\n          if (permissions.some(function (p) {\n            return userPerms.includes(p);\n          })) {\n            return true;\n          }\n        }\n        return permissions.some(function (permission) {\n          return state.currentUserPermissions.includes(permission);\n        });\n      };\n    },\n    // 检查是否有指定的所有权限\n    hasAllPermissions: function hasAllPermissions(state) {\n      return function (permissions) {\n        if (state.currentUserRole === 'admin') return true;\n\n        // 检查用户特定权限\n        var userId = localStorage.getItem('userId');\n        if (userId) {\n          var userPerms = state.userPermissions[userId] || [];\n          if (permissions.every(function (p) {\n            return userPerms.includes(p);\n          })) {\n            return true;\n          }\n        }\n        return permissions.every(function (permission) {\n          return state.currentUserPermissions.includes(permission);\n        });\n      };\n    },\n    // 获取用户的所有权限（包括继承的权限）\n    getAllUserPermissions: function getAllUserPermissions(state) {\n      return function (userId) {\n        var userPerms = new Set(state.userPermissions[userId] || []);\n        var rolePerms = new Set(state.rolePermissions[state.currentUserRole] || []);\n\n        // 添加继承的权限\n        var _addInheritedPermissions = function addInheritedPermissions(permission) {\n          var inherited = state.permissionInheritance[permission] || [];\n          inherited.forEach(function (p) {\n            userPerms.add(p);\n            _addInheritedPermissions(p);\n          });\n        };\n\n        // 处理用户权限的继承\n        Array.from(userPerms).forEach(_addInheritedPermissions);\n        // 处理角色权限的继承\n        Array.from(rolePerms).forEach(_addInheritedPermissions);\n        return Array.from(userPerms);\n      };\n    }\n  },\n  actions: {\n    // 初始化权限数据\n    initPermissions: function initPermissions() {\n      var _this = this;\n      // 从localStorage获取用户信息\n      var userId = localStorage.getItem('userId');\n      var role = localStorage.getItem('userRole') || 'user';\n      this.currentUserRole = role;\n\n      // 如果是管理员，直接赋予所有权限\n      if (role === 'admin') {\n        this.currentUserPermissions = ['*'];\n        localStorage.setItem('userPermissions', JSON.stringify(this.currentUserPermissions));\n        return;\n      }\n\n      // 获取角色对应的权限\n      var rolePermissions = this.rolePermissions[role] || [];\n\n      // 获取用户特定权限\n      var userPermissions = userId ? this.userPermissions[userId] || [] : [];\n\n      // 合并权限并处理继承\n      var allPermissions = new Set([].concat(_toConsumableArray(rolePermissions), _toConsumableArray(userPermissions)));\n\n      // 添加继承的权限\n      var _addInheritedPermissions2 = function addInheritedPermissions(permission) {\n        var inherited = _this.permissionInheritance[permission] || [];\n        inherited.forEach(function (p) {\n          allPermissions.add(p);\n          _addInheritedPermissions2(p);\n        });\n      };\n      Array.from(allPermissions).forEach(_addInheritedPermissions2);\n\n      // 更新当前用户权限\n      this.currentUserPermissions = Array.from(allPermissions);\n\n      // 保存到localStorage\n      localStorage.setItem('userPermissions', JSON.stringify(this.currentUserPermissions));\n    },\n    // 更新用户角色和权限\n    updateUserRole: function updateUserRole(userId, role) {\n      this.currentUserRole = role;\n\n      // 更新localStorage\n      localStorage.setItem('userRole', role);\n\n      // 重新初始化权限\n      this.initPermissions();\n    },\n    // 更新用户特定权限\n    updateUserPermissions: function updateUserPermissions(userId, permissions) {\n      this.userPermissions[userId] = permissions;\n\n      // 如果是当前用户，重新初始化权限\n      if (userId === localStorage.getItem('userId')) {\n        this.initPermissions();\n      }\n\n      // 保存到localStorage\n      localStorage.setItem('userPermissionsMap', JSON.stringify(this.userPermissions));\n    },\n    // 更新角色权限\n    updateRolePermissions: function updateRolePermissions(role, permissions) {\n      this.rolePermissions[role] = permissions;\n\n      // 如果是当前用户的角色，重新初始化权限\n      if (role === this.currentUserRole) {\n        this.initPermissions();\n      }\n\n      // 保存到localStorage\n      localStorage.setItem('rolePermissions', JSON.stringify(this.rolePermissions));\n    },\n    // 添加权限继承关系\n    addPermissionInheritance: function addPermissionInheritance(permission, inheritedPermission) {\n      if (!this.permissionInheritance[permission]) {\n        this.permissionInheritance[permission] = [];\n      }\n      if (!this.permissionInheritance[permission].includes(inheritedPermission)) {\n        this.permissionInheritance[permission].push(inheritedPermission);\n\n        // 保存到localStorage\n        localStorage.setItem('permissionInheritance', JSON.stringify(this.permissionInheritance));\n\n        // 重新初始化权限以应用新的继承关系\n        this.initPermissions();\n      }\n    },\n    // 移除权限继承关系\n    removePermissionInheritance: function removePermissionInheritance(permission, inheritedPermission) {\n      if (this.permissionInheritance[permission]) {\n        var index = this.permissionInheritance[permission].indexOf(inheritedPermission);\n        if (index > -1) {\n          this.permissionInheritance[permission].splice(index, 1);\n\n          // 保存到localStorage\n          localStorage.setItem('permissionInheritance', JSON.stringify(this.permissionInheritance));\n\n          // 重新初始化权限以应用新的继承关系\n          this.initPermissions();\n        }\n      }\n    },\n    // 添加权限\n    addPermission: function addPermission(permission) {\n      if (!this.permissions.find(function (p) {\n        return p.permissionCode === permission.permissionCode;\n      })) {\n        this.permissions.push(permission);\n\n        // 保存到localStorage\n        localStorage.setItem('permissions', JSON.stringify(this.permissions));\n      }\n    },\n    // 移除权限\n    removePermission: function removePermission(permissionCode) {\n      var _this2 = this;\n      var index = this.permissions.findIndex(function (p) {\n        return p.permissionCode === permissionCode;\n      });\n      if (index > -1) {\n        this.permissions.splice(index, 1);\n\n        // 从继承关系中移除\n        Object.keys(this.permissionInheritance).forEach(function (key) {\n          var inheritedIndex = _this2.permissionInheritance[key].indexOf(permissionCode);\n          if (inheritedIndex > -1) {\n            _this2.permissionInheritance[key].splice(inheritedIndex, 1);\n          }\n        });\n\n        // 保存到localStorage\n        localStorage.setItem('permissions', JSON.stringify(this.permissions));\n        localStorage.setItem('permissionInheritance', JSON.stringify(this.permissionInheritance));\n\n        // 重新初始化权限\n        this.initPermissions();\n      }\n    },\n    // 从localStorage恢复数据\n    restoreFromStorage: function restoreFromStorage() {\n      var permissions = localStorage.getItem('permissions');\n      if (permissions) {\n        this.permissions = JSON.parse(permissions);\n      }\n      var rolePermissions = localStorage.getItem('rolePermissions');\n      if (rolePermissions) {\n        this.rolePermissions = JSON.parse(rolePermissions);\n      }\n      var userPermissions = localStorage.getItem('userPermissionsMap');\n      if (userPermissions) {\n        this.userPermissions = JSON.parse(userPermissions);\n      }\n      var permissionInheritance = localStorage.getItem('permissionInheritance');\n      if (permissionInheritance) {\n        this.permissionInheritance = JSON.parse(permissionInheritance);\n      }\n\n      // 初始化当前用户权限\n      this.initPermissions();\n    },\n    // 清除权限数据\n    clearPermissions: function clearPermissions() {\n      this.permissions = [];\n      this.currentUserPermissions = [];\n      this.currentUserRole = 'user';\n      this.userPermissions = {};\n      this.permissionInheritance = {};\n      localStorage.removeItem('userRole');\n      localStorage.removeItem('userPermissions');\n      localStorage.removeItem('permissions');\n      localStorage.removeItem('rolePermissions');\n      localStorage.removeItem('userPermissionsMap');\n      localStorage.removeItem('permissionInheritance');\n    },\n    // 添加初始化方法\n    init: function init() {\n      var _this3 = this;\n      // 从localStorage恢复数据\n      this.restoreFromStorage();\n\n      // 如果没有权限数据，设置默认数据\n      if (!this.permissions.length) {\n        // 添加基础权限数据\n        var defaultPermissions = [{\n          id: 1,\n          permissionName: '查看权限',\n          permissionCode: 'VIEW_PERMISSIONS',\n          type: 'menu',\n          description: '允许查看权限列表',\n          status: true\n        }, {\n          id: 2,\n          permissionName: '管理权限',\n          permissionCode: 'MANAGE_PERMISSIONS',\n          type: 'operation',\n          description: '允许添加、编辑、删除权限',\n          status: true\n        }, {\n          id: 3,\n          permissionName: '查看用户',\n          permissionCode: 'VIEW_USERS',\n          type: 'menu',\n          description: '允许查看用户列表',\n          status: true\n        }, {\n          id: 4,\n          permissionName: '查看角色',\n          permissionCode: 'VIEW_ROLES',\n          type: 'menu',\n          description: '允许查看角色列表',\n          status: true\n        }];\n        defaultPermissions.forEach(function (permission) {\n          _this3.addPermission(permission);\n        });\n      }\n\n      // 初始化当前用户权限\n      this.initPermissions();\n    }\n  }\n});","map":{"version":3,"names":["defineStore","usePermissionStore","state","permissions","rolePermissions","admin","user","userPermissions","currentUserPermissions","currentUserRole","permissionInheritance","getters","hasPermission","permission","_state$userPermission","userId","localStorage","getItem","includes","hasAnyPermission","userPerms","some","p","hasAllPermissions","every","getAllUserPermissions","Set","rolePerms","addInheritedPermissions","inherited","forEach","add","Array","from","actions","initPermissions","_this","role","setItem","JSON","stringify","allPermissions","concat","_toConsumableArray","updateUserRole","updateUserPermissions","updateRolePermissions","addPermissionInheritance","inheritedPermission","push","removePermissionInheritance","index","indexOf","splice","addPermission","find","permissionCode","removePermission","_this2","findIndex","Object","keys","key","inheritedIndex","restoreFromStorage","parse","clearPermissions","removeItem","init","_this3","length","defaultPermissions","id","permissionName","type","description","status"],"sources":["C:/Users/indexae/Desktop/scm退货/scm/frontend/src/stores/permission.js"],"sourcesContent":["import { defineStore } from 'pinia'\r\n\r\n// 定义权限状态管理\r\nexport const usePermissionStore = defineStore('permission', {\r\n  state: () => ({\r\n    // 所有权限列表\r\n    permissions: [],\r\n    // 角色权限映射\r\n    rolePermissions: {\r\n      admin: ['*'], // 管理员拥有所有权限\r\n      user: [\r\n        'VIEW_DASHBOARD',\r\n        'VIEW_PROFILE',\r\n        'VIEW_PERMISSIONS', // 添加权限管理的查看权限\r\n        'VIEW_USERS',\r\n        'VIEW_ROLES'\r\n      ], // 普通用户基础权限\r\n    },\r\n    // 用户权限映射\r\n    userPermissions: {},\r\n    // 当前用户权限\r\n    currentUserPermissions: [],\r\n    // 当前用户角色\r\n    currentUserRole: '',\r\n    // 权限继承关系\r\n    permissionInheritance: {},\r\n  }),\r\n\r\n  getters: {\r\n    // 检查是否有指定权限\r\n    hasPermission: (state) => (permission) => {\r\n      if (state.currentUserRole === 'admin') return true\r\n      \r\n      // 检查用户特定权限\r\n      const userId = localStorage.getItem('userId')\r\n      if (userId && state.userPermissions[userId]?.includes(permission)) {\r\n        return true\r\n      }\r\n      \r\n      // 检查角色权限\r\n      return state.currentUserPermissions.includes(permission)\r\n    },\r\n    \r\n    // 检查是否有指定权限中的任意一个\r\n    hasAnyPermission: (state) => (permissions) => {\r\n      if (state.currentUserRole === 'admin') return true\r\n      \r\n      // 检查用户特定权限\r\n      const userId = localStorage.getItem('userId')\r\n      if (userId) {\r\n        const userPerms = state.userPermissions[userId] || []\r\n        if (permissions.some(p => userPerms.includes(p))) {\r\n          return true\r\n        }\r\n      }\r\n      \r\n      return permissions.some(permission => state.currentUserPermissions.includes(permission))\r\n    },\r\n    \r\n    // 检查是否有指定的所有权限\r\n    hasAllPermissions: (state) => (permissions) => {\r\n      if (state.currentUserRole === 'admin') return true\r\n      \r\n      // 检查用户特定权限\r\n      const userId = localStorage.getItem('userId')\r\n      if (userId) {\r\n        const userPerms = state.userPermissions[userId] || []\r\n        if (permissions.every(p => userPerms.includes(p))) {\r\n          return true\r\n        }\r\n      }\r\n      \r\n      return permissions.every(permission => state.currentUserPermissions.includes(permission))\r\n    },\r\n\r\n    // 获取用户的所有权限（包括继承的权限）\r\n    getAllUserPermissions: (state) => (userId) => {\r\n      const userPerms = new Set(state.userPermissions[userId] || [])\r\n      const rolePerms = new Set(state.rolePermissions[state.currentUserRole] || [])\r\n      \r\n      // 添加继承的权限\r\n      const addInheritedPermissions = (permission) => {\r\n        const inherited = state.permissionInheritance[permission] || []\r\n        inherited.forEach(p => {\r\n          userPerms.add(p)\r\n          addInheritedPermissions(p)\r\n        })\r\n      }\r\n      \r\n      // 处理用户权限的继承\r\n      Array.from(userPerms).forEach(addInheritedPermissions)\r\n      // 处理角色权限的继承\r\n      Array.from(rolePerms).forEach(addInheritedPermissions)\r\n      \r\n      return Array.from(userPerms)\r\n    }\r\n  },\r\n\r\n  actions: {\r\n    // 初始化权限数据\r\n    initPermissions() {\r\n      // 从localStorage获取用户信息\r\n      const userId = localStorage.getItem('userId')\r\n      const role = localStorage.getItem('userRole') || 'user'\r\n      this.currentUserRole = role\r\n      \r\n      // 如果是管理员，直接赋予所有权限\r\n      if (role === 'admin') {\r\n        this.currentUserPermissions = ['*']\r\n        localStorage.setItem('userPermissions', JSON.stringify(this.currentUserPermissions))\r\n        return\r\n      }\r\n      \r\n      // 获取角色对应的权限\r\n      const rolePermissions = this.rolePermissions[role] || []\r\n      \r\n      // 获取用户特定权限\r\n      const userPermissions = userId ? (this.userPermissions[userId] || []) : []\r\n      \r\n      // 合并权限并处理继承\r\n      const allPermissions = new Set([...rolePermissions, ...userPermissions])\r\n      \r\n      // 添加继承的权限\r\n      const addInheritedPermissions = (permission) => {\r\n        const inherited = this.permissionInheritance[permission] || []\r\n        inherited.forEach(p => {\r\n          allPermissions.add(p)\r\n          addInheritedPermissions(p)\r\n        })\r\n      }\r\n      \r\n      Array.from(allPermissions).forEach(addInheritedPermissions)\r\n      \r\n      // 更新当前用户权限\r\n      this.currentUserPermissions = Array.from(allPermissions)\r\n      \r\n      // 保存到localStorage\r\n      localStorage.setItem('userPermissions', JSON.stringify(this.currentUserPermissions))\r\n    },\r\n\r\n    // 更新用户角色和权限\r\n    updateUserRole(userId, role) {\r\n      this.currentUserRole = role\r\n      \r\n      // 更新localStorage\r\n      localStorage.setItem('userRole', role)\r\n      \r\n      // 重新初始化权限\r\n      this.initPermissions()\r\n    },\r\n\r\n    // 更新用户特定权限\r\n    updateUserPermissions(userId, permissions) {\r\n      this.userPermissions[userId] = permissions\r\n      \r\n      // 如果是当前用户，重新初始化权限\r\n      if (userId === localStorage.getItem('userId')) {\r\n        this.initPermissions()\r\n      }\r\n      \r\n      // 保存到localStorage\r\n      localStorage.setItem('userPermissionsMap', JSON.stringify(this.userPermissions))\r\n    },\r\n\r\n    // 更新角色权限\r\n    updateRolePermissions(role, permissions) {\r\n      this.rolePermissions[role] = permissions\r\n      \r\n      // 如果是当前用户的角色，重新初始化权限\r\n      if (role === this.currentUserRole) {\r\n        this.initPermissions()\r\n      }\r\n      \r\n      // 保存到localStorage\r\n      localStorage.setItem('rolePermissions', JSON.stringify(this.rolePermissions))\r\n    },\r\n\r\n    // 添加权限继承关系\r\n    addPermissionInheritance(permission, inheritedPermission) {\r\n      if (!this.permissionInheritance[permission]) {\r\n        this.permissionInheritance[permission] = []\r\n      }\r\n      \r\n      if (!this.permissionInheritance[permission].includes(inheritedPermission)) {\r\n        this.permissionInheritance[permission].push(inheritedPermission)\r\n        \r\n        // 保存到localStorage\r\n        localStorage.setItem('permissionInheritance', JSON.stringify(this.permissionInheritance))\r\n        \r\n        // 重新初始化权限以应用新的继承关系\r\n        this.initPermissions()\r\n      }\r\n    },\r\n\r\n    // 移除权限继承关系\r\n    removePermissionInheritance(permission, inheritedPermission) {\r\n      if (this.permissionInheritance[permission]) {\r\n        const index = this.permissionInheritance[permission].indexOf(inheritedPermission)\r\n        if (index > -1) {\r\n          this.permissionInheritance[permission].splice(index, 1)\r\n          \r\n          // 保存到localStorage\r\n          localStorage.setItem('permissionInheritance', JSON.stringify(this.permissionInheritance))\r\n          \r\n          // 重新初始化权限以应用新的继承关系\r\n          this.initPermissions()\r\n        }\r\n      }\r\n    },\r\n\r\n    // 添加权限\r\n    addPermission(permission) {\r\n      if (!this.permissions.find(p => p.permissionCode === permission.permissionCode)) {\r\n        this.permissions.push(permission)\r\n        \r\n        // 保存到localStorage\r\n        localStorage.setItem('permissions', JSON.stringify(this.permissions))\r\n      }\r\n    },\r\n\r\n    // 移除权限\r\n    removePermission(permissionCode) {\r\n      const index = this.permissions.findIndex(p => p.permissionCode === permissionCode)\r\n      if (index > -1) {\r\n        this.permissions.splice(index, 1)\r\n        \r\n        // 从继承关系中移除\r\n        Object.keys(this.permissionInheritance).forEach(key => {\r\n          const inheritedIndex = this.permissionInheritance[key].indexOf(permissionCode)\r\n          if (inheritedIndex > -1) {\r\n            this.permissionInheritance[key].splice(inheritedIndex, 1)\r\n          }\r\n        })\r\n        \r\n        // 保存到localStorage\r\n        localStorage.setItem('permissions', JSON.stringify(this.permissions))\r\n        localStorage.setItem('permissionInheritance', JSON.stringify(this.permissionInheritance))\r\n        \r\n        // 重新初始化权限\r\n        this.initPermissions()\r\n      }\r\n    },\r\n\r\n    // 从localStorage恢复数据\r\n    restoreFromStorage() {\r\n      const permissions = localStorage.getItem('permissions')\r\n      if (permissions) {\r\n        this.permissions = JSON.parse(permissions)\r\n      }\r\n      \r\n      const rolePermissions = localStorage.getItem('rolePermissions')\r\n      if (rolePermissions) {\r\n        this.rolePermissions = JSON.parse(rolePermissions)\r\n      }\r\n      \r\n      const userPermissions = localStorage.getItem('userPermissionsMap')\r\n      if (userPermissions) {\r\n        this.userPermissions = JSON.parse(userPermissions)\r\n      }\r\n      \r\n      const permissionInheritance = localStorage.getItem('permissionInheritance')\r\n      if (permissionInheritance) {\r\n        this.permissionInheritance = JSON.parse(permissionInheritance)\r\n      }\r\n      \r\n      // 初始化当前用户权限\r\n      this.initPermissions()\r\n    },\r\n\r\n    // 清除权限数据\r\n    clearPermissions() {\r\n      this.permissions = []\r\n      this.currentUserPermissions = []\r\n      this.currentUserRole = 'user'\r\n      this.userPermissions = {}\r\n      this.permissionInheritance = {}\r\n      \r\n      localStorage.removeItem('userRole')\r\n      localStorage.removeItem('userPermissions')\r\n      localStorage.removeItem('permissions')\r\n      localStorage.removeItem('rolePermissions')\r\n      localStorage.removeItem('userPermissionsMap')\r\n      localStorage.removeItem('permissionInheritance')\r\n    },\r\n\r\n    // 添加初始化方法\r\n    init() {\r\n      // 从localStorage恢复数据\r\n      this.restoreFromStorage()\r\n      \r\n      // 如果没有权限数据，设置默认数据\r\n      if (!this.permissions.length) {\r\n        // 添加基础权限数据\r\n        const defaultPermissions = [\r\n          {\r\n            id: 1,\r\n            permissionName: '查看权限',\r\n            permissionCode: 'VIEW_PERMISSIONS',\r\n            type: 'menu',\r\n            description: '允许查看权限列表',\r\n            status: true\r\n          },\r\n          {\r\n            id: 2,\r\n            permissionName: '管理权限',\r\n            permissionCode: 'MANAGE_PERMISSIONS',\r\n            type: 'operation',\r\n            description: '允许添加、编辑、删除权限',\r\n            status: true\r\n          },\r\n          {\r\n            id: 3,\r\n            permissionName: '查看用户',\r\n            permissionCode: 'VIEW_USERS',\r\n            type: 'menu',\r\n            description: '允许查看用户列表',\r\n            status: true\r\n          },\r\n          {\r\n            id: 4,\r\n            permissionName: '查看角色',\r\n            permissionCode: 'VIEW_ROLES',\r\n            type: 'menu',\r\n            description: '允许查看角色列表',\r\n            status: true\r\n          }\r\n        ]\r\n        \r\n        defaultPermissions.forEach(permission => {\r\n          this.addPermission(permission)\r\n        })\r\n      }\r\n      \r\n      // 初始化当前用户权限\r\n      this.initPermissions()\r\n    }\r\n  }\r\n}) "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}