{"ast":null,"code":"import _toConsumableArray from \"C:/Users/indexae/Desktop/scm\\u9000\\u8D27/scm/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.every.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.date.to-json.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.every.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { defineStore } from 'pinia';\n\n// 定义权限状态管理\nexport var usePermissionStore = defineStore('permission', {\n  state: function state() {\n    return {\n      // 所有权限列表\n      permissions: [],\n      // 角色权限映射\n      rolePermissions: {\n        admin: ['*'],\n        // 管理员拥有所有权限\n        user: ['VIEW_DASHBOARD', 'VIEW_PROFILE', 'VIEW_PERMISSIONS',\n        // 添加权限管理的查看权限\n        'VIEW_USERS', 'VIEW_ROLES'] // 普通用户基础权限\n      },\n      // 用户权限映射\n      userPermissions: {},\n      // 当前用户权限\n      currentUserPermissions: [],\n      // 当前用户角色\n      currentUserRole: '',\n      // 权限继承关系\n      permissionInheritance: {}\n    };\n  },\n  getters: {\n    // 检查是否有指定权限\n    hasPermission: function hasPermission(state) {\n      return function (permission) {\n        var _state$userPermission;\n        if (state.currentUserRole === 'admin') return true;\n\n        // 检查用户特定权限\n        var userId = localStorage.getItem('userId');\n        if (userId && (_state$userPermission = state.userPermissions[userId]) !== null && _state$userPermission !== void 0 && _state$userPermission.includes(permission)) {\n          return true;\n        }\n\n        // 检查角色权限\n        return state.currentUserPermissions.includes(permission);\n      };\n    },\n    // 检查是否有指定权限中的任意一个\n    hasAnyPermission: function hasAnyPermission(state) {\n      return function (permissions) {\n        if (state.currentUserRole === 'admin') return true;\n\n        // 检查用户特定权限\n        var userId = localStorage.getItem('userId');\n        if (userId) {\n          var userPerms = state.userPermissions[userId] || [];\n          if (permissions.some(function (p) {\n            return userPerms.includes(p);\n          })) {\n            return true;\n          }\n        }\n        return permissions.some(function (permission) {\n          return state.currentUserPermissions.includes(permission);\n        });\n      };\n    },\n    // 检查是否有指定的所有权限\n    hasAllPermissions: function hasAllPermissions(state) {\n      return function (permissions) {\n        if (state.currentUserRole === 'admin') return true;\n\n        // 检查用户特定权限\n        var userId = localStorage.getItem('userId');\n        if (userId) {\n          var userPerms = state.userPermissions[userId] || [];\n          if (permissions.every(function (p) {\n            return userPerms.includes(p);\n          })) {\n            return true;\n          }\n        }\n        return permissions.every(function (permission) {\n          return state.currentUserPermissions.includes(permission);\n        });\n      };\n    },\n    // 获取用户的所有权限（包括继承的权限）\n    getAllUserPermissions: function getAllUserPermissions(state) {\n      return function (userId) {\n        var userPerms = new Set(state.userPermissions[userId] || []);\n        var rolePerms = new Set(state.rolePermissions[state.currentUserRole] || []);\n\n        // 添加继承的权限\n        var _addInheritedPermissions = function addInheritedPermissions(permission) {\n          var inherited = state.permissionInheritance[permission] || [];\n          inherited.forEach(function (p) {\n            userPerms.add(p);\n            _addInheritedPermissions(p);\n          });\n        };\n\n        // 处理用户权限的继承\n        Array.from(userPerms).forEach(_addInheritedPermissions);\n        // 处理角色权限的继承\n        Array.from(rolePerms).forEach(_addInheritedPermissions);\n        return Array.from(userPerms);\n      };\n    }\n  },\n  actions: {\n    // 初始化权限数据\n    init: function init() {\n      var _this = this;\n      // 从localStorage恢复数据\n      this.restoreFromStorage();\n\n      // 如果没有权限数据，设置默认数据\n      if (!this.permissions.length) {\n        // 添加基础权限数据\n        var defaultPermissions = [{\n          id: 1,\n          permissionName: '查看权限',\n          permissionCode: 'VIEW_PERMISSIONS',\n          type: 'menu',\n          description: '允许查看权限列表',\n          status: true\n        }, {\n          id: 2,\n          permissionName: '管理权限',\n          permissionCode: 'MANAGE_PERMISSIONS',\n          type: 'operation',\n          description: '允许添加、编辑、删除权限',\n          status: true\n        }, {\n          id: 3,\n          permissionName: '查看用户',\n          permissionCode: 'VIEW_USERS',\n          type: 'menu',\n          description: '允许查看用户列表',\n          status: true\n        }, {\n          id: 4,\n          permissionName: '查看角色',\n          permissionCode: 'VIEW_ROLES',\n          type: 'menu',\n          description: '允许查看角色列表',\n          status: true\n        }, {\n          id: 5,\n          permissionName: '管理角色',\n          permissionCode: 'MANAGE_ROLES',\n          type: 'operation',\n          description: '允许添加、编辑、删除角色',\n          status: true\n        }, {\n          id: 6,\n          permissionName: '分配权限',\n          permissionCode: 'ASSIGN_PERMISSIONS',\n          type: 'operation',\n          description: '允许为角色分配权限',\n          status: true\n        }];\n        defaultPermissions.forEach(function (permission) {\n          _this.addPermission(permission);\n        });\n\n        // 设置默认角色权限\n        this.rolePermissions = {\n          admin: ['*'],\n          // 管理员拥有所有权限\n          user: ['VIEW_DASHBOARD', 'VIEW_PROFILE', 'VIEW_PERMISSIONS', 'VIEW_USERS', 'VIEW_ROLES'],\n          guest: ['VIEW_DASHBOARD', 'VIEW_PROFILE']\n        };\n      }\n\n      // 初始化当前用户权限\n      this.initPermissions();\n    },\n    // 初始化权限数据\n    initPermissions: function initPermissions() {\n      var _this2 = this;\n      // 从localStorage获取用户信息\n      var userId = localStorage.getItem('userId');\n      var role = localStorage.getItem('userRole') || 'user';\n      this.currentUserRole = role;\n\n      // 如果是管理员，直接赋予所有权限\n      if (role === 'admin') {\n        this.currentUserPermissions = ['*'];\n        localStorage.setItem('userPermissions', JSON.stringify(this.currentUserPermissions));\n        return;\n      }\n\n      // 获取角色对应的权限\n      var rolePermissions = this.rolePermissions[role] || [];\n\n      // 获取用户特定权限\n      var userPermissions = userId ? this.userPermissions[userId] || [] : [];\n\n      // 合并权限并处理继承\n      var allPermissions = new Set([].concat(_toConsumableArray(rolePermissions), _toConsumableArray(userPermissions)));\n\n      // 添加继承的权限\n      var _addInheritedPermissions2 = function addInheritedPermissions(permission) {\n        var inherited = _this2.permissionInheritance[permission] || [];\n        inherited.forEach(function (p) {\n          allPermissions.add(p);\n          _addInheritedPermissions2(p);\n        });\n      };\n      Array.from(allPermissions).forEach(_addInheritedPermissions2);\n\n      // 更新当前用户权限\n      this.currentUserPermissions = Array.from(allPermissions);\n\n      // 保存到localStorage\n      localStorage.setItem('userPermissions', JSON.stringify(this.currentUserPermissions));\n    },\n    // 更新用户角色和权限\n    updateUserRole: function updateUserRole(userId, role) {\n      this.currentUserRole = role;\n\n      // 更新localStorage\n      localStorage.setItem('userRole', role);\n\n      // 重新初始化权限\n      this.initPermissions();\n    },\n    // 更新用户特定权限\n    updateUserPermissions: function updateUserPermissions(userId, permissions) {\n      this.userPermissions[userId] = permissions;\n\n      // 如果是当前用户，重新初始化权限\n      if (userId === localStorage.getItem('userId')) {\n        this.initPermissions();\n      }\n\n      // 保存到localStorage\n      localStorage.setItem('userPermissionsMap', JSON.stringify(this.userPermissions));\n    },\n    // 更新角色权限\n    updateRolePermissions: function updateRolePermissions(roleCode, permissions) {\n      // 如果是管理员角色，始终保持所有权限\n      if (roleCode === 'admin') {\n        this.rolePermissions[roleCode] = ['*'];\n      } else {\n        this.rolePermissions[roleCode] = permissions;\n      }\n\n      // 保存到localStorage\n      localStorage.setItem('rolePermissions', JSON.stringify(this.rolePermissions));\n\n      // 如果是当前用户的角色，重新初始化权限\n      if (roleCode === this.currentUserRole) {\n        this.initPermissions();\n      }\n    },\n    // 获取角色权限\n    getRolePermissions: function getRolePermissions(roleCode) {\n      return this.rolePermissions[roleCode] || [];\n    },\n    // 检查角色是否有指定权限\n    checkRolePermission: function checkRolePermission(roleCode, permission) {\n      var permissions = this.getRolePermissions(roleCode);\n      return permissions.includes('*') || permissions.includes(permission);\n    },\n    // 添加角色\n    addRole: function addRole(roleCode) {\n      var initialPermissions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      if (!this.rolePermissions[roleCode]) {\n        this.rolePermissions[roleCode] = initialPermissions;\n        localStorage.setItem('rolePermissions', JSON.stringify(this.rolePermissions));\n      }\n    },\n    // 删除角色\n    removeRole: function removeRole(roleCode) {\n      if (roleCode !== 'admin') {\n        // 防止删除管理员角色\n        delete this.rolePermissions[roleCode];\n        localStorage.setItem('rolePermissions', JSON.stringify(this.rolePermissions));\n      }\n    },\n    // 添加权限继承关系\n    addPermissionInheritance: function addPermissionInheritance(permission, inheritedPermission) {\n      if (!this.permissionInheritance[permission]) {\n        this.permissionInheritance[permission] = [];\n      }\n      if (!this.permissionInheritance[permission].includes(inheritedPermission)) {\n        this.permissionInheritance[permission].push(inheritedPermission);\n\n        // 保存到localStorage\n        localStorage.setItem('permissionInheritance', JSON.stringify(this.permissionInheritance));\n\n        // 重新初始化权限以应用新的继承关系\n        this.initPermissions();\n      }\n    },\n    // 移除权限继承关系\n    removePermissionInheritance: function removePermissionInheritance(permission, inheritedPermission) {\n      if (this.permissionInheritance[permission]) {\n        var index = this.permissionInheritance[permission].indexOf(inheritedPermission);\n        if (index > -1) {\n          this.permissionInheritance[permission].splice(index, 1);\n\n          // 保存到localStorage\n          localStorage.setItem('permissionInheritance', JSON.stringify(this.permissionInheritance));\n\n          // 重新初始化权限以应用新的继承关系\n          this.initPermissions();\n        }\n      }\n    },\n    // 添加权限\n    addPermission: function addPermission(permission) {\n      if (!this.permissions.find(function (p) {\n        return p.permissionCode === permission.permissionCode;\n      })) {\n        this.permissions.push(permission);\n\n        // 保存到localStorage\n        localStorage.setItem('permissions', JSON.stringify(this.permissions));\n      }\n    },\n    // 移除权限\n    removePermission: function removePermission(permissionCode) {\n      var _this3 = this;\n      var index = this.permissions.findIndex(function (p) {\n        return p.permissionCode === permissionCode;\n      });\n      if (index > -1) {\n        this.permissions.splice(index, 1);\n\n        // 从继承关系中移除\n        Object.keys(this.permissionInheritance).forEach(function (key) {\n          var inheritedIndex = _this3.permissionInheritance[key].indexOf(permissionCode);\n          if (inheritedIndex > -1) {\n            _this3.permissionInheritance[key].splice(inheritedIndex, 1);\n          }\n        });\n\n        // 保存到localStorage\n        localStorage.setItem('permissions', JSON.stringify(this.permissions));\n        localStorage.setItem('permissionInheritance', JSON.stringify(this.permissionInheritance));\n\n        // 重新初始化权限\n        this.initPermissions();\n      }\n    },\n    // 从localStorage恢复数据\n    restoreFromStorage: function restoreFromStorage() {\n      var permissions = localStorage.getItem('permissions');\n      if (permissions) {\n        this.permissions = JSON.parse(permissions);\n      }\n      var rolePermissions = localStorage.getItem('rolePermissions');\n      if (rolePermissions) {\n        this.rolePermissions = JSON.parse(rolePermissions);\n      }\n      var userPermissions = localStorage.getItem('userPermissionsMap');\n      if (userPermissions) {\n        this.userPermissions = JSON.parse(userPermissions);\n      }\n      var permissionInheritance = localStorage.getItem('permissionInheritance');\n      if (permissionInheritance) {\n        this.permissionInheritance = JSON.parse(permissionInheritance);\n      }\n\n      // 初始化当前用户权限\n      this.initPermissions();\n    },\n    // 清除权限数据\n    clearPermissions: function clearPermissions() {\n      this.permissions = [];\n      this.currentUserPermissions = [];\n      this.currentUserRole = 'user';\n      this.userPermissions = {};\n      this.permissionInheritance = {};\n      localStorage.removeItem('userRole');\n      localStorage.removeItem('userPermissions');\n      localStorage.removeItem('permissions');\n      localStorage.removeItem('rolePermissions');\n      localStorage.removeItem('userPermissionsMap');\n      localStorage.removeItem('permissionInheritance');\n    }\n  }\n});","map":{"version":3,"names":["defineStore","usePermissionStore","state","permissions","rolePermissions","admin","user","userPermissions","currentUserPermissions","currentUserRole","permissionInheritance","getters","hasPermission","permission","_state$userPermission","userId","localStorage","getItem","includes","hasAnyPermission","userPerms","some","p","hasAllPermissions","every","getAllUserPermissions","Set","rolePerms","addInheritedPermissions","inherited","forEach","add","Array","from","actions","init","_this","restoreFromStorage","length","defaultPermissions","id","permissionName","permissionCode","type","description","status","addPermission","guest","initPermissions","_this2","role","setItem","JSON","stringify","allPermissions","concat","_toConsumableArray","updateUserRole","updateUserPermissions","updateRolePermissions","roleCode","getRolePermissions","checkRolePermission","addRole","initialPermissions","arguments","undefined","removeRole","addPermissionInheritance","inheritedPermission","push","removePermissionInheritance","index","indexOf","splice","find","removePermission","_this3","findIndex","Object","keys","key","inheritedIndex","parse","clearPermissions","removeItem"],"sources":["C:/Users/indexae/Desktop/scm退货/scm/frontend/src/stores/permission.js"],"sourcesContent":["import { defineStore } from 'pinia'\r\n\r\n// 定义权限状态管理\r\nexport const usePermissionStore = defineStore('permission', {\r\n  state: () => ({\r\n    // 所有权限列表\r\n    permissions: [],\r\n    // 角色权限映射\r\n    rolePermissions: {\r\n      admin: ['*'], // 管理员拥有所有权限\r\n      user: [\r\n        'VIEW_DASHBOARD',\r\n        'VIEW_PROFILE',\r\n        'VIEW_PERMISSIONS', // 添加权限管理的查看权限\r\n        'VIEW_USERS',\r\n        'VIEW_ROLES'\r\n      ], // 普通用户基础权限\r\n    },\r\n    // 用户权限映射\r\n    userPermissions: {},\r\n    // 当前用户权限\r\n    currentUserPermissions: [],\r\n    // 当前用户角色\r\n    currentUserRole: '',\r\n    // 权限继承关系\r\n    permissionInheritance: {},\r\n  }),\r\n\r\n  getters: {\r\n    // 检查是否有指定权限\r\n    hasPermission: (state) => (permission) => {\r\n      if (state.currentUserRole === 'admin') return true\r\n      \r\n      // 检查用户特定权限\r\n      const userId = localStorage.getItem('userId')\r\n      if (userId && state.userPermissions[userId]?.includes(permission)) {\r\n        return true\r\n      }\r\n      \r\n      // 检查角色权限\r\n      return state.currentUserPermissions.includes(permission)\r\n    },\r\n    \r\n    // 检查是否有指定权限中的任意一个\r\n    hasAnyPermission: (state) => (permissions) => {\r\n      if (state.currentUserRole === 'admin') return true\r\n      \r\n      // 检查用户特定权限\r\n      const userId = localStorage.getItem('userId')\r\n      if (userId) {\r\n        const userPerms = state.userPermissions[userId] || []\r\n        if (permissions.some(p => userPerms.includes(p))) {\r\n          return true\r\n        }\r\n      }\r\n      \r\n      return permissions.some(permission => state.currentUserPermissions.includes(permission))\r\n    },\r\n    \r\n    // 检查是否有指定的所有权限\r\n    hasAllPermissions: (state) => (permissions) => {\r\n      if (state.currentUserRole === 'admin') return true\r\n      \r\n      // 检查用户特定权限\r\n      const userId = localStorage.getItem('userId')\r\n      if (userId) {\r\n        const userPerms = state.userPermissions[userId] || []\r\n        if (permissions.every(p => userPerms.includes(p))) {\r\n          return true\r\n        }\r\n      }\r\n      \r\n      return permissions.every(permission => state.currentUserPermissions.includes(permission))\r\n    },\r\n\r\n    // 获取用户的所有权限（包括继承的权限）\r\n    getAllUserPermissions: (state) => (userId) => {\r\n      const userPerms = new Set(state.userPermissions[userId] || [])\r\n      const rolePerms = new Set(state.rolePermissions[state.currentUserRole] || [])\r\n      \r\n      // 添加继承的权限\r\n      const addInheritedPermissions = (permission) => {\r\n        const inherited = state.permissionInheritance[permission] || []\r\n        inherited.forEach(p => {\r\n          userPerms.add(p)\r\n          addInheritedPermissions(p)\r\n        })\r\n      }\r\n      \r\n      // 处理用户权限的继承\r\n      Array.from(userPerms).forEach(addInheritedPermissions)\r\n      // 处理角色权限的继承\r\n      Array.from(rolePerms).forEach(addInheritedPermissions)\r\n      \r\n      return Array.from(userPerms)\r\n    }\r\n  },\r\n\r\n  actions: {\r\n    // 初始化权限数据\r\n    init() {\r\n      // 从localStorage恢复数据\r\n      this.restoreFromStorage()\r\n      \r\n      // 如果没有权限数据，设置默认数据\r\n      if (!this.permissions.length) {\r\n        // 添加基础权限数据\r\n        const defaultPermissions = [\r\n          {\r\n            id: 1,\r\n            permissionName: '查看权限',\r\n            permissionCode: 'VIEW_PERMISSIONS',\r\n            type: 'menu',\r\n            description: '允许查看权限列表',\r\n            status: true\r\n          },\r\n          {\r\n            id: 2,\r\n            permissionName: '管理权限',\r\n            permissionCode: 'MANAGE_PERMISSIONS',\r\n            type: 'operation',\r\n            description: '允许添加、编辑、删除权限',\r\n            status: true\r\n          },\r\n          {\r\n            id: 3,\r\n            permissionName: '查看用户',\r\n            permissionCode: 'VIEW_USERS',\r\n            type: 'menu',\r\n            description: '允许查看用户列表',\r\n            status: true\r\n          },\r\n          {\r\n            id: 4,\r\n            permissionName: '查看角色',\r\n            permissionCode: 'VIEW_ROLES',\r\n            type: 'menu',\r\n            description: '允许查看角色列表',\r\n            status: true\r\n          },\r\n          {\r\n            id: 5,\r\n            permissionName: '管理角色',\r\n            permissionCode: 'MANAGE_ROLES',\r\n            type: 'operation',\r\n            description: '允许添加、编辑、删除角色',\r\n            status: true\r\n          },\r\n          {\r\n            id: 6,\r\n            permissionName: '分配权限',\r\n            permissionCode: 'ASSIGN_PERMISSIONS',\r\n            type: 'operation',\r\n            description: '允许为角色分配权限',\r\n            status: true\r\n          }\r\n        ]\r\n        \r\n        defaultPermissions.forEach(permission => {\r\n          this.addPermission(permission)\r\n        })\r\n\r\n        // 设置默认角色权限\r\n        this.rolePermissions = {\r\n          admin: ['*'], // 管理员拥有所有权限\r\n          user: [\r\n            'VIEW_DASHBOARD',\r\n            'VIEW_PROFILE',\r\n            'VIEW_PERMISSIONS',\r\n            'VIEW_USERS',\r\n            'VIEW_ROLES'\r\n          ],\r\n          guest: [\r\n            'VIEW_DASHBOARD',\r\n            'VIEW_PROFILE'\r\n          ]\r\n        }\r\n      }\r\n      \r\n      // 初始化当前用户权限\r\n      this.initPermissions()\r\n    },\r\n\r\n    // 初始化权限数据\r\n    initPermissions() {\r\n      // 从localStorage获取用户信息\r\n      const userId = localStorage.getItem('userId')\r\n      const role = localStorage.getItem('userRole') || 'user'\r\n      this.currentUserRole = role\r\n      \r\n      // 如果是管理员，直接赋予所有权限\r\n      if (role === 'admin') {\r\n        this.currentUserPermissions = ['*']\r\n        localStorage.setItem('userPermissions', JSON.stringify(this.currentUserPermissions))\r\n        return\r\n      }\r\n      \r\n      // 获取角色对应的权限\r\n      const rolePermissions = this.rolePermissions[role] || []\r\n      \r\n      // 获取用户特定权限\r\n      const userPermissions = userId ? (this.userPermissions[userId] || []) : []\r\n      \r\n      // 合并权限并处理继承\r\n      const allPermissions = new Set([...rolePermissions, ...userPermissions])\r\n      \r\n      // 添加继承的权限\r\n      const addInheritedPermissions = (permission) => {\r\n        const inherited = this.permissionInheritance[permission] || []\r\n        inherited.forEach(p => {\r\n          allPermissions.add(p)\r\n          addInheritedPermissions(p)\r\n        })\r\n      }\r\n      \r\n      Array.from(allPermissions).forEach(addInheritedPermissions)\r\n      \r\n      // 更新当前用户权限\r\n      this.currentUserPermissions = Array.from(allPermissions)\r\n      \r\n      // 保存到localStorage\r\n      localStorage.setItem('userPermissions', JSON.stringify(this.currentUserPermissions))\r\n    },\r\n\r\n    // 更新用户角色和权限\r\n    updateUserRole(userId, role) {\r\n      this.currentUserRole = role\r\n      \r\n      // 更新localStorage\r\n      localStorage.setItem('userRole', role)\r\n      \r\n      // 重新初始化权限\r\n      this.initPermissions()\r\n    },\r\n\r\n    // 更新用户特定权限\r\n    updateUserPermissions(userId, permissions) {\r\n      this.userPermissions[userId] = permissions\r\n      \r\n      // 如果是当前用户，重新初始化权限\r\n      if (userId === localStorage.getItem('userId')) {\r\n        this.initPermissions()\r\n      }\r\n      \r\n      // 保存到localStorage\r\n      localStorage.setItem('userPermissionsMap', JSON.stringify(this.userPermissions))\r\n    },\r\n\r\n    // 更新角色权限\r\n    updateRolePermissions(roleCode, permissions) {\r\n      // 如果是管理员角色，始终保持所有权限\r\n      if (roleCode === 'admin') {\r\n        this.rolePermissions[roleCode] = ['*']\r\n      } else {\r\n        this.rolePermissions[roleCode] = permissions\r\n      }\r\n      \r\n      // 保存到localStorage\r\n      localStorage.setItem('rolePermissions', JSON.stringify(this.rolePermissions))\r\n      \r\n      // 如果是当前用户的角色，重新初始化权限\r\n      if (roleCode === this.currentUserRole) {\r\n        this.initPermissions()\r\n      }\r\n    },\r\n\r\n    // 获取角色权限\r\n    getRolePermissions(roleCode) {\r\n      return this.rolePermissions[roleCode] || []\r\n    },\r\n\r\n    // 检查角色是否有指定权限\r\n    checkRolePermission(roleCode, permission) {\r\n      const permissions = this.getRolePermissions(roleCode)\r\n      return permissions.includes('*') || permissions.includes(permission)\r\n    },\r\n\r\n    // 添加角色\r\n    addRole(roleCode, initialPermissions = []) {\r\n      if (!this.rolePermissions[roleCode]) {\r\n        this.rolePermissions[roleCode] = initialPermissions\r\n        localStorage.setItem('rolePermissions', JSON.stringify(this.rolePermissions))\r\n      }\r\n    },\r\n\r\n    // 删除角色\r\n    removeRole(roleCode) {\r\n      if (roleCode !== 'admin') { // 防止删除管理员角色\r\n        delete this.rolePermissions[roleCode]\r\n        localStorage.setItem('rolePermissions', JSON.stringify(this.rolePermissions))\r\n      }\r\n    },\r\n\r\n    // 添加权限继承关系\r\n    addPermissionInheritance(permission, inheritedPermission) {\r\n      if (!this.permissionInheritance[permission]) {\r\n        this.permissionInheritance[permission] = []\r\n      }\r\n      \r\n      if (!this.permissionInheritance[permission].includes(inheritedPermission)) {\r\n        this.permissionInheritance[permission].push(inheritedPermission)\r\n        \r\n        // 保存到localStorage\r\n        localStorage.setItem('permissionInheritance', JSON.stringify(this.permissionInheritance))\r\n        \r\n        // 重新初始化权限以应用新的继承关系\r\n        this.initPermissions()\r\n      }\r\n    },\r\n\r\n    // 移除权限继承关系\r\n    removePermissionInheritance(permission, inheritedPermission) {\r\n      if (this.permissionInheritance[permission]) {\r\n        const index = this.permissionInheritance[permission].indexOf(inheritedPermission)\r\n        if (index > -1) {\r\n          this.permissionInheritance[permission].splice(index, 1)\r\n          \r\n          // 保存到localStorage\r\n          localStorage.setItem('permissionInheritance', JSON.stringify(this.permissionInheritance))\r\n          \r\n          // 重新初始化权限以应用新的继承关系\r\n          this.initPermissions()\r\n        }\r\n      }\r\n    },\r\n\r\n    // 添加权限\r\n    addPermission(permission) {\r\n      if (!this.permissions.find(p => p.permissionCode === permission.permissionCode)) {\r\n        this.permissions.push(permission)\r\n        \r\n        // 保存到localStorage\r\n        localStorage.setItem('permissions', JSON.stringify(this.permissions))\r\n      }\r\n    },\r\n\r\n    // 移除权限\r\n    removePermission(permissionCode) {\r\n      const index = this.permissions.findIndex(p => p.permissionCode === permissionCode)\r\n      if (index > -1) {\r\n        this.permissions.splice(index, 1)\r\n        \r\n        // 从继承关系中移除\r\n        Object.keys(this.permissionInheritance).forEach(key => {\r\n          const inheritedIndex = this.permissionInheritance[key].indexOf(permissionCode)\r\n          if (inheritedIndex > -1) {\r\n            this.permissionInheritance[key].splice(inheritedIndex, 1)\r\n          }\r\n        })\r\n        \r\n        // 保存到localStorage\r\n        localStorage.setItem('permissions', JSON.stringify(this.permissions))\r\n        localStorage.setItem('permissionInheritance', JSON.stringify(this.permissionInheritance))\r\n        \r\n        // 重新初始化权限\r\n        this.initPermissions()\r\n      }\r\n    },\r\n\r\n    // 从localStorage恢复数据\r\n    restoreFromStorage() {\r\n      const permissions = localStorage.getItem('permissions')\r\n      if (permissions) {\r\n        this.permissions = JSON.parse(permissions)\r\n      }\r\n      \r\n      const rolePermissions = localStorage.getItem('rolePermissions')\r\n      if (rolePermissions) {\r\n        this.rolePermissions = JSON.parse(rolePermissions)\r\n      }\r\n      \r\n      const userPermissions = localStorage.getItem('userPermissionsMap')\r\n      if (userPermissions) {\r\n        this.userPermissions = JSON.parse(userPermissions)\r\n      }\r\n      \r\n      const permissionInheritance = localStorage.getItem('permissionInheritance')\r\n      if (permissionInheritance) {\r\n        this.permissionInheritance = JSON.parse(permissionInheritance)\r\n      }\r\n      \r\n      // 初始化当前用户权限\r\n      this.initPermissions()\r\n    },\r\n\r\n    // 清除权限数据\r\n    clearPermissions() {\r\n      this.permissions = []\r\n      this.currentUserPermissions = []\r\n      this.currentUserRole = 'user'\r\n      this.userPermissions = {}\r\n      this.permissionInheritance = {}\r\n      \r\n      localStorage.removeItem('userRole')\r\n      localStorage.removeItem('userPermissions')\r\n      localStorage.removeItem('permissions')\r\n      localStorage.removeItem('rolePermissions')\r\n      localStorage.removeItem('userPermissionsMap')\r\n      localStorage.removeItem('permissionInheritance')\r\n    }\r\n  }\r\n}) "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}