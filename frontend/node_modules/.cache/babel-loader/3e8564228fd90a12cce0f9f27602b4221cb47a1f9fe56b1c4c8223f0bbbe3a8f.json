{"ast":null,"code":"import { createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createBlock as _createBlock } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"user-manage\"\n};\nvar _hoisted_2 = {\n  \"class\": \"card-header\"\n};\nvar _hoisted_3 = {\n  \"class\": \"dialog-footer\"\n};\nvar _hoisted_4 = {\n  \"class\": \"dialog-footer\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_el_button = _resolveComponent(\"el-button\");\n  var _component_el_table_column = _resolveComponent(\"el-table-column\");\n  var _component_el_tag = _resolveComponent(\"el-tag\");\n  var _component_el_table = _resolveComponent(\"el-table\");\n  var _component_el_card = _resolveComponent(\"el-card\");\n  var _component_el_input = _resolveComponent(\"el-input\");\n  var _component_el_form_item = _resolveComponent(\"el-form-item\");\n  var _component_el_option = _resolveComponent(\"el-option\");\n  var _component_el_select = _resolveComponent(\"el-select\");\n  var _component_el_form = _resolveComponent(\"el-form\");\n  var _component_el_dialog = _resolveComponent(\"el-dialog\");\n  var _component_el_checkbox = _resolveComponent(\"el-checkbox\");\n  var _component_el_checkbox_group = _resolveComponent(\"el-checkbox-group\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_el_card, {\n    \"class\": \"box-card\"\n  }, {\n    header: _withCtx(function () {\n      return [_createElementVNode(\"div\", _hoisted_2, [_cache[9] || (_cache[9] = _createElementVNode(\"span\", null, \"用户管理\", -1 /* HOISTED */)), _createVNode(_component_el_button, {\n        type: \"primary\",\n        onClick: $setup.handleAdd\n      }, {\n        \"default\": _withCtx(function () {\n          return _cache[8] || (_cache[8] = [_createTextVNode(\"添加用户\")]);\n        }),\n        _: 1 /* STABLE */\n      })])];\n    }),\n    \"default\": _withCtx(function () {\n      return [_createVNode(_component_el_table, {\n        data: $setup.users,\n        style: {\n          \"width\": \"100%\"\n        }\n      }, {\n        \"default\": _withCtx(function () {\n          return [_createVNode(_component_el_table_column, {\n            prop: \"id\",\n            label: \"ID\",\n            width: \"80\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"username\",\n            label: \"用户名\"\n          }), _createVNode(_component_el_table_column, {\n            label: \"角色\",\n            width: \"200\"\n          }, {\n            \"default\": _withCtx(function (scope) {\n              return [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(scope.row.roles, function (role) {\n                return _openBlock(), _createBlock(_component_el_tag, {\n                  key: role.id,\n                  \"class\": \"role-tag\",\n                  type: \"info\"\n                }, {\n                  \"default\": _withCtx(function () {\n                    return [_createTextVNode(_toDisplayString(role.roleName), 1 /* TEXT */)];\n                  }),\n                  _: 2 /* DYNAMIC */\n                }, 1024 /* DYNAMIC_SLOTS */);\n              }), 128 /* KEYED_FRAGMENT */)), _createVNode(_component_el_button, {\n                link: \"\",\n                type: \"primary\",\n                size: \"small\",\n                onClick: function onClick($event) {\n                  return $setup.handleAssignRole(scope.row);\n                }\n              }, {\n                \"default\": _withCtx(function () {\n                  return _cache[10] || (_cache[10] = [_createTextVNode(\" 分配角色 \")]);\n                }),\n                _: 2 /* DYNAMIC */\n              }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"onClick\"])];\n            }),\n            _: 1 /* STABLE */\n          }), _createVNode(_component_el_table_column, {\n            label: \"角色状态\",\n            width: \"120\"\n          }, {\n            \"default\": _withCtx(function (scope) {\n              return [_createVNode(_component_el_tag, {\n                type: scope.row.roles.length > 0 ? 'success' : 'warning'\n              }, {\n                \"default\": _withCtx(function () {\n                  return [_createTextVNode(_toDisplayString(scope.row.roles.length > 0 ? '已分配' : '未分配'), 1 /* TEXT */)];\n                }),\n                _: 2 /* DYNAMIC */\n              }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"type\"])];\n            }),\n            _: 1 /* STABLE */\n          }), _createVNode(_component_el_table_column, {\n            prop: \"createTime\",\n            label: \"创建时间\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"updateTime\",\n            label: \"更新时间\"\n          }), _createVNode(_component_el_table_column, {\n            label: \"操作\",\n            width: \"200\"\n          }, {\n            \"default\": _withCtx(function (scope) {\n              return [_createVNode(_component_el_button, {\n                size: \"small\",\n                onClick: function onClick($event) {\n                  return $setup.handleEdit(scope.row);\n                }\n              }, {\n                \"default\": _withCtx(function () {\n                  return _cache[11] || (_cache[11] = [_createTextVNode(\"编辑\")]);\n                }),\n                _: 2 /* DYNAMIC */\n              }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"onClick\"]), _createVNode(_component_el_button, {\n                size: \"small\",\n                type: \"danger\",\n                onClick: function onClick($event) {\n                  return $setup.handleDelete(scope.row);\n                }\n              }, {\n                \"default\": _withCtx(function () {\n                  return _cache[12] || (_cache[12] = [_createTextVNode(\"删除\")]);\n                }),\n                _: 2 /* DYNAMIC */\n              }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"onClick\"])];\n            }),\n            _: 1 /* STABLE */\n          })];\n        }),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"data\"])];\n    }),\n    _: 1 /* STABLE */\n  }), _createCommentVNode(\" 添加/编辑用户对话框 \"), _createVNode(_component_el_dialog, {\n    title: $setup.dialogTitle,\n    modelValue: $setup.dialogVisible,\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = function ($event) {\n      return $setup.dialogVisible = $event;\n    }),\n    width: \"500px\"\n  }, {\n    footer: _withCtx(function () {\n      return [_createElementVNode(\"span\", _hoisted_3, [_createVNode(_component_el_button, {\n        onClick: _cache[3] || (_cache[3] = function ($event) {\n          return $setup.dialogVisible = false;\n        })\n      }, {\n        \"default\": _withCtx(function () {\n          return _cache[13] || (_cache[13] = [_createTextVNode(\"取消\")]);\n        }),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_el_button, {\n        type: \"primary\",\n        onClick: $setup.handleSubmit\n      }, {\n        \"default\": _withCtx(function () {\n          return _cache[14] || (_cache[14] = [_createTextVNode(\"确定\")]);\n        }),\n        _: 1 /* STABLE */\n      })])];\n    }),\n    \"default\": _withCtx(function () {\n      return [_createVNode(_component_el_form, {\n        model: $setup.userForm,\n        \"label-width\": \"100px\"\n      }, {\n        \"default\": _withCtx(function () {\n          return [_createVNode(_component_el_form_item, {\n            label: \"用户名\"\n          }, {\n            \"default\": _withCtx(function () {\n              return [_createVNode(_component_el_input, {\n                modelValue: $setup.userForm.username,\n                \"onUpdate:modelValue\": _cache[0] || (_cache[0] = function ($event) {\n                  return $setup.userForm.username = $event;\n                })\n              }, null, 8 /* PROPS */, [\"modelValue\"])];\n            }),\n            _: 1 /* STABLE */\n          }), !$setup.userForm.id ? (_openBlock(), _createBlock(_component_el_form_item, {\n            key: 0,\n            label: \"密码\"\n          }, {\n            \"default\": _withCtx(function () {\n              return [_createVNode(_component_el_input, {\n                modelValue: $setup.userForm.password,\n                \"onUpdate:modelValue\": _cache[1] || (_cache[1] = function ($event) {\n                  return $setup.userForm.password = $event;\n                }),\n                type: \"password\"\n              }, null, 8 /* PROPS */, [\"modelValue\"])];\n            }),\n            _: 1 /* STABLE */\n          })) : _createCommentVNode(\"v-if\", true), _createVNode(_component_el_form_item, {\n            label: \"角色\"\n          }, {\n            \"default\": _withCtx(function () {\n              return [_createVNode(_component_el_select, {\n                modelValue: $setup.userForm.roles,\n                \"onUpdate:modelValue\": _cache[2] || (_cache[2] = function ($event) {\n                  return $setup.userForm.roles = $event;\n                }),\n                multiple: \"\",\n                placeholder: \"请选择角色\"\n              }, {\n                \"default\": _withCtx(function () {\n                  return [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.allRoles, function (role) {\n                    return _openBlock(), _createBlock(_component_el_option, {\n                      key: role.id,\n                      label: role.roleName,\n                      value: role.id\n                    }, null, 8 /* PROPS */, [\"label\", \"value\"]);\n                  }), 128 /* KEYED_FRAGMENT */))];\n                }),\n                _: 1 /* STABLE */\n              }, 8 /* PROPS */, [\"modelValue\"])];\n            }),\n            _: 1 /* STABLE */\n          })];\n        }),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"model\"])];\n    }),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"title\", \"modelValue\"]), _createCommentVNode(\" 分配角色对话框 \"), _createVNode(_component_el_dialog, {\n    title: \"分配角色\",\n    modelValue: $setup.roleDialogVisible,\n    \"onUpdate:modelValue\": _cache[7] || (_cache[7] = function ($event) {\n      return $setup.roleDialogVisible = $event;\n    }),\n    width: \"500px\"\n  }, {\n    footer: _withCtx(function () {\n      return [_createElementVNode(\"span\", _hoisted_4, [_createVNode(_component_el_button, {\n        onClick: _cache[6] || (_cache[6] = function ($event) {\n          return $setup.roleDialogVisible = false;\n        })\n      }, {\n        \"default\": _withCtx(function () {\n          return _cache[15] || (_cache[15] = [_createTextVNode(\"取消\")]);\n        }),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_el_button, {\n        type: \"primary\",\n        onClick: $setup.handleRoleSubmit\n      }, {\n        \"default\": _withCtx(function () {\n          return _cache[16] || (_cache[16] = [_createTextVNode(\"确定\")]);\n        }),\n        _: 1 /* STABLE */\n      })])];\n    }),\n    \"default\": _withCtx(function () {\n      return [_createVNode(_component_el_form, null, {\n        \"default\": _withCtx(function () {\n          return [_createVNode(_component_el_form_item, {\n            label: \"选择角色\"\n          }, {\n            \"default\": _withCtx(function () {\n              return [_createVNode(_component_el_checkbox_group, {\n                modelValue: $setup.selectedRoles,\n                \"onUpdate:modelValue\": _cache[5] || (_cache[5] = function ($event) {\n                  return $setup.selectedRoles = $event;\n                })\n              }, {\n                \"default\": _withCtx(function () {\n                  return [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.allRoles, function (role) {\n                    return _openBlock(), _createBlock(_component_el_checkbox, {\n                      key: role.id,\n                      label: role.id\n                    }, {\n                      \"default\": _withCtx(function () {\n                        return [_createTextVNode(_toDisplayString(role.roleName), 1 /* TEXT */)];\n                      }),\n                      _: 2 /* DYNAMIC */\n                    }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"label\"]);\n                  }), 128 /* KEYED_FRAGMENT */))];\n                }),\n                _: 1 /* STABLE */\n              }, 8 /* PROPS */, [\"modelValue\"])];\n            }),\n            _: 1 /* STABLE */\n          })];\n        }),\n        _: 1 /* STABLE */\n      })];\n    }),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\"])]);\n}","map":{"version":3,"names":["_createElementBlock","_hoisted_1","_createVNode","_component_el_card","header","_withCtx","_createElementVNode","_hoisted_2","_component_el_button","type","onClick","$setup","handleAdd","_cache","_createTextVNode","_","_component_el_table","data","users","style","_component_el_table_column","prop","label","width","scope","_Fragment","_renderList","row","roles","role","_createBlock","_component_el_tag","key","id","_toDisplayString","roleName","link","size","$event","handleAssignRole","length","handleEdit","handleDelete","_createCommentVNode","_component_el_dialog","title","dialogTitle","modelValue","dialogVisible","footer","_hoisted_3","handleSubmit","_component_el_form","model","userForm","_component_el_form_item","_component_el_input","username","password","_component_el_select","multiple","placeholder","allRoles","_component_el_option","value","roleDialogVisible","_hoisted_4","handleRoleSubmit","_component_el_checkbox_group","selectedRoles","_component_el_checkbox"],"sources":["C:\\Users\\indexae\\Desktop\\scm日志\\scm\\frontend\\src\\views\\UserManage.vue"],"sourcesContent":["<template>\r\n  <div class=\"user-manage\">\r\n    <el-card class=\"box-card\">\r\n      <template #header>\r\n        <div class=\"card-header\">\r\n          <span>用户管理</span>\r\n          <el-button type=\"primary\" @click=\"handleAdd\">添加用户</el-button>\r\n        </div>\r\n      </template>\r\n      \r\n      <!-- 用户列表 -->\r\n      <el-table :data=\"users\" style=\"width: 100%\">\r\n        <el-table-column prop=\"id\" label=\"ID\" width=\"80\" />\r\n        <el-table-column prop=\"username\" label=\"用户名\" />\r\n        <el-table-column label=\"角色\" width=\"200\">\r\n          <template #default=\"scope\">\r\n            <el-tag\r\n              v-for=\"role in scope.row.roles\"\r\n              :key=\"role.id\"\r\n              class=\"role-tag\"\r\n              type=\"info\">\r\n              {{ role.roleName }}\r\n            </el-tag>\r\n            <el-button \r\n              link \r\n              type=\"primary\" \r\n              size=\"small\"\r\n              @click=\"handleAssignRole(scope.row)\">\r\n              分配角色\r\n            </el-button>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column label=\"角色状态\" width=\"120\">\r\n          <template #default=\"scope\">\r\n            <el-tag :type=\"scope.row.roles.length > 0 ? 'success' : 'warning'\">\r\n              {{ scope.row.roles.length > 0 ? '已分配' : '未分配' }}\r\n            </el-tag>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column prop=\"createTime\" label=\"创建时间\" />\r\n        <el-table-column prop=\"updateTime\" label=\"更新时间\" />\r\n        <el-table-column label=\"操作\" width=\"200\">\r\n          <template #default=\"scope\">\r\n            <el-button size=\"small\" @click=\"handleEdit(scope.row)\">编辑</el-button>\r\n            <el-button \r\n              size=\"small\" \r\n              type=\"danger\" \r\n              @click=\"handleDelete(scope.row)\">删除</el-button>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n    </el-card>\r\n\r\n    <!-- 添加/编辑用户对话框 -->\r\n    <el-dialog \r\n      :title=\"dialogTitle\" \r\n      v-model=\"dialogVisible\" \r\n      width=\"500px\">\r\n      <el-form \r\n        :model=\"userForm\" \r\n        label-width=\"100px\">\r\n        <el-form-item label=\"用户名\">\r\n          <el-input v-model=\"userForm.username\" />\r\n        </el-form-item>\r\n        <el-form-item label=\"密码\" v-if=\"!userForm.id\">\r\n          <el-input v-model=\"userForm.password\" type=\"password\" />\r\n        </el-form-item>\r\n        <el-form-item label=\"角色\">\r\n          <el-select v-model=\"userForm.roles\" multiple placeholder=\"请选择角色\">\r\n            <el-option\r\n              v-for=\"role in allRoles\"\r\n              :key=\"role.id\"\r\n              :label=\"role.roleName\"\r\n              :value=\"role.id\">\r\n            </el-option>\r\n          </el-select>\r\n        </el-form-item>\r\n      </el-form>\r\n      <template #footer>\r\n        <span class=\"dialog-footer\">\r\n          <el-button @click=\"dialogVisible = false\">取消</el-button>\r\n          <el-button type=\"primary\" @click=\"handleSubmit\">确定</el-button>\r\n        </span>\r\n      </template>\r\n    </el-dialog>\r\n\r\n    <!-- 分配角色对话框 -->\r\n    <el-dialog\r\n      title=\"分配角色\"\r\n      v-model=\"roleDialogVisible\"\r\n      width=\"500px\">\r\n      <el-form>\r\n        <el-form-item label=\"选择角色\">\r\n          <el-checkbox-group v-model=\"selectedRoles\">\r\n            <el-checkbox\r\n              v-for=\"role in allRoles\"\r\n              :key=\"role.id\"\r\n              :label=\"role.id\">\r\n              {{ role.roleName }}\r\n            </el-checkbox>\r\n          </el-checkbox-group>\r\n        </el-form-item>\r\n      </el-form>\r\n      <template #footer>\r\n        <span class=\"dialog-footer\">\r\n          <el-button @click=\"roleDialogVisible = false\">取消</el-button>\r\n          <el-button type=\"primary\" @click=\"handleRoleSubmit\">确定</el-button>\r\n        </span>\r\n      </template>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted } from 'vue'\r\nimport { ElMessage, ElMessageBox } from 'element-plus'\r\nimport { useSettingsStore } from '../stores/settings'\r\n\r\n// 用户列表数据\r\nconst users = ref([])\r\nconst allRoles = ref([]) // 所有角色列表\r\nconst selectedRoles = ref([]) // 选中的角色ID列表\r\nconst currentUserId = ref(null) // 当前操作的用户ID\r\nconst settingsStore = useSettingsStore()\r\n\r\n// 对话框相关数据\r\nconst dialogVisible = ref(false)\r\nconst roleDialogVisible = ref(false)\r\nconst dialogTitle = ref('添加用户')\r\nconst userForm = ref({\r\n  id: null,\r\n  username: '',\r\n  password: '',\r\n  roles: [] // 添加角色字段\r\n})\r\n\r\n// 获取用户列表\r\nconst getUsers = async () => {\r\n  try {\r\n    const res = await fetch('http://localhost:8000/api/users', {\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      credentials: 'include'\r\n    })\r\n    const data = await res.json()\r\n    if (data.code === 0) {\r\n      // 获取每个用户的角色信息\r\n      const usersWithRoles = await Promise.all(\r\n        data.data.map(async (user) => {\r\n          try {\r\n            const rolesRes = await fetch(`http://localhost:8000/api/roles/user/${user.id}`, {\r\n              headers: {\r\n                'Content-Type': 'application/json'\r\n              },\r\n              credentials: 'include'\r\n            })\r\n            const rolesData = await rolesRes.json()\r\n            console.log(`User ${user.id} roles:`, rolesData) // 添加日志\r\n            return {\r\n              ...user,\r\n              roles: rolesData.code === 0 ? rolesData.data : []\r\n            }\r\n          } catch (error) {\r\n            console.error(`获取用户 ${user.id} 的角色失败:`, error)\r\n            return {\r\n              ...user,\r\n              roles: []\r\n            }\r\n          }\r\n        })\r\n      )\r\n      console.log('Users with roles:', usersWithRoles) // 添加日志\r\n      users.value = usersWithRoles\r\n    } else {\r\n      ElMessage.error(data.message || '获取用户列表失败')\r\n    }\r\n  } catch (error) {\r\n    console.error('获取用户列表失败:', error)\r\n    ElMessage.error('获取用户列表失败')\r\n  }\r\n}\r\n\r\n// 获取所有角色\r\nconst getAllRoles = async () => {\r\n  try {\r\n    console.log('开始获取角色列表...') // 添加日志\r\n    const res = await fetch('http://127.0.0.1:8080/api/roles', {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json'\r\n      },\r\n      credentials: 'include'\r\n    })\r\n    \r\n    console.log('角色列表API响应状态:', res.status) // 添加日志\r\n    \r\n    if (!res.ok) {\r\n      throw new Error(`HTTP error! status: ${res.status}`)\r\n    }\r\n    \r\n    const data = await res.json()\r\n    console.log('获取角色列表响应:', data) // 添加日志\r\n    \r\n    if (data.code === 0) {\r\n      allRoles.value = data.data || []\r\n      console.log('设置角色列表:', allRoles.value) // 添加日志\r\n      if (allRoles.value.length === 0) {\r\n        console.warn('获取到的角色列表为空') // 添加警告日志\r\n      }\r\n    } else {\r\n      console.error('获取角色列表失败:', data.message)\r\n      ElMessage.error(data.message || '获取角色列表失败')\r\n    }\r\n  } catch (error) {\r\n    console.error('获取角色列表失败:', error)\r\n    ElMessage.error('获取角色列表失败: ' + error.message)\r\n  }\r\n}\r\n\r\n// 添加用户\r\nconst handleAdd = async () => {\r\n  userForm.value = {\r\n    id: null,\r\n    username: '',\r\n    password: '',\r\n    roles: []\r\n  }\r\n  dialogTitle.value = '添加用户'\r\n  await getAllRoles() // 获取所有角色列表\r\n  dialogVisible.value = true\r\n}\r\n\r\n// 编辑用户\r\nconst handleEdit = async (row) => {\r\n  userForm.value = {\r\n    id: row.id,\r\n    username: row.username,\r\n    roles: row.roles.map(role => role.id)\r\n  }\r\n  dialogTitle.value = '编辑用户'\r\n  await getAllRoles() // 获取所有角色列表\r\n  dialogVisible.value = true\r\n}\r\n\r\n// 删除用户\r\nconst handleDelete = (row) => {\r\n  ElMessageBox.confirm(\r\n    '确定要删除该用户吗？',\r\n    '警告',\r\n    {\r\n      confirmButtonText: '确定',\r\n      cancelButtonText: '取消',\r\n      type: 'warning',\r\n    }\r\n  ).then(async () => {\r\n    try {\r\n      const res = await fetch(`http://localhost:8000/api/users/${row.id}`, {\r\n        method: 'DELETE',\r\n        credentials: 'include'\r\n      })\r\n      const data = await res.json()\r\n      if (data.code === 0) {\r\n        ElMessage.success('删除成功')\r\n        getUsers()\r\n      } else {\r\n        ElMessage.error(data.message || '删除失败')\r\n      }\r\n    } catch (error) {\r\n      console.error('删除用户失败:', error)\r\n      ElMessage.error('删除失败')\r\n    }\r\n  })\r\n}\r\n\r\n// 分配角色\r\nconst handleAssignRole = async (row) => {\r\n  currentUserId.value = row.id\r\n  await getAllRoles()\r\n  // 设置当前用户已有的角色\r\n  selectedRoles.value = row.roles.map(role => role.id)\r\n  roleDialogVisible.value = true\r\n}\r\n\r\n// 提交角色分配\r\nconst handleRoleSubmit = async () => {\r\n  try {\r\n    // 获取用户当前的角色\r\n    const userRoles = users.value\r\n      .find(user => user.id === currentUserId.value)\r\n      ?.roles.map(role => role.id) || []\r\n    \r\n    // 需要添加的角色\r\n    const rolesToAdd = selectedRoles.value.filter(roleId => !userRoles.includes(roleId))\r\n    // 需要移除的角色\r\n    const rolesToRemove = userRoles.filter(roleId => !selectedRoles.value.includes(roleId))\r\n\r\n    // 添加新角色\r\n    for (const roleId of rolesToAdd) {\r\n      const res = await fetch(`http://localhost:8000/api/roles/assign?userId=${currentUserId.value}&roleId=${roleId}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        credentials: 'include'\r\n      })\r\n      const data = await res.json()\r\n      console.log('分配角色响应:', data) // 添加日志\r\n      if (data.code !== 0) {\r\n        console.error('分配角色失败:', data) // 添加错误日志\r\n        throw new Error(data.message || `分配角色失败: ${roleId}`)\r\n      }\r\n    }\r\n\r\n    // 移除旧角色\r\n    for (const roleId of rolesToRemove) {\r\n      const res = await fetch(`http://localhost:8000/api/roles/remove?userId=${currentUserId.value}&roleId=${roleId}`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        credentials: 'include'\r\n      })\r\n      const data = await res.json()\r\n      console.log('移除角色响应:', data) // 添加日志\r\n      if (data.code !== 0) {\r\n        console.error('移除角色失败:', data) // 添加错误日志\r\n        throw new Error(data.message || `移除角色失败: ${roleId}`)\r\n      }\r\n    }\r\n\r\n    ElMessage.success('角色分配成功')\r\n    roleDialogVisible.value = false\r\n    \r\n    // 立即获取用户列表以更新角色信息\r\n    await getUsers()\r\n  } catch (error) {\r\n    console.error('角色分配失败:', error)\r\n    ElMessage.error(error.message || '角色分配失败')\r\n  }\r\n}\r\n\r\n// 提交表单\r\nconst handleSubmit = async () => {\r\n  try {\r\n    // 如果是添加用户，验证密码长度\r\n    if (!userForm.value.id && userForm.value.password.length < settingsStore.passwordMinLength) {\r\n      ElMessage.error(`密码长度不能小于${settingsStore.passwordMinLength}位`)\r\n      return\r\n    }\r\n\r\n    const url = userForm.value.id \r\n      ? `http://localhost:8000/api/users/${userForm.value.id}`\r\n      : 'http://localhost:8000/api/register'\r\n    const method = userForm.value.id ? 'PUT' : 'POST'\r\n    \r\n    // 创建/更新用户的请求体\r\n    const requestBody = {\r\n      username: userForm.value.username\r\n    }\r\n    \r\n    // 只在添加用户时包含密码字段\r\n    if (!userForm.value.id) {\r\n      requestBody.password = userForm.value.password\r\n    }\r\n    \r\n    // 创建/更新用户\r\n    const res = await fetch(url, {\r\n      method,\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      credentials: 'include',\r\n      body: JSON.stringify(requestBody)\r\n    })\r\n    \r\n    const data = await res.json()\r\n    if (data.code === 0) {\r\n      // 如果是添加用户，需要分配角色\r\n      if (!userForm.value.id && userForm.value.roles.length > 0) {\r\n        const userId = data.data.id\r\n        // 为新用户分配角色\r\n        for (const roleId of userForm.value.roles) {\r\n          await fetch(`http://localhost:8000/api/roles/assign?userId=${userId}&roleId=${roleId}`, {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n            },\r\n            credentials: 'include'\r\n          })\r\n        }\r\n      }\r\n      // 如果是编辑用户，更新角色\r\n      else if (userForm.value.id) {\r\n        const userId = userForm.value.id\r\n        const currentRoles = users.value\r\n          .find(user => user.id === userId)\r\n          ?.roles.map(role => role.id) || []\r\n        \r\n        // 需要添加的角色\r\n        const rolesToAdd = userForm.value.roles.filter(roleId => !currentRoles.includes(roleId))\r\n        // 需要移除的角色\r\n        const rolesToRemove = currentRoles.filter(roleId => !userForm.value.roles.includes(roleId))\r\n\r\n        // 添加新角色\r\n        for (const roleId of rolesToAdd) {\r\n          await fetch(`http://localhost:8000/api/roles/assign?userId=${userId}&roleId=${roleId}`, {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n            },\r\n            credentials: 'include'\r\n          })\r\n        }\r\n\r\n        // 移除旧角色\r\n        for (const roleId of rolesToRemove) {\r\n          await fetch(`http://localhost:8000/api/roles/remove?userId=${userId}&roleId=${roleId}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n            },\r\n            credentials: 'include'\r\n          })\r\n        }\r\n      }\r\n\r\n      ElMessage.success(userForm.value.id ? '更新成功' : '添加成功')\r\n      dialogVisible.value = false\r\n      // 立即重新获取用户列表以更新角色信息\r\n      await getUsers()\r\n    } else {\r\n      ElMessage.error(data.message || (userForm.value.id ? '更新失败' : '添加失败'))\r\n    }\r\n  } catch (error) {\r\n    console.error('提交表单失败:', error)\r\n    ElMessage.error(userForm.value.id ? '更新失败' : '添加失败')\r\n  }\r\n}\r\n\r\nonMounted(async () => {\r\n  await Promise.all([\r\n    getUsers(),\r\n    getAllRoles() // 在组件挂载时获取角色列表\r\n  ])\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.user-manage {\r\n  padding: 20px;\r\n}\r\n\r\n.card-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.dialog-footer {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  gap: 10px;\r\n}\r\n\r\n.role-tag {\r\n  margin-right: 5px;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}