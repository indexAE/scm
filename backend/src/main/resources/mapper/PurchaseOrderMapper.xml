<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.scm.mapper.PurchaseOrderMapper">
    <resultMap id="BaseResultMap" type="com.scm.entity.PurchaseOrder">
        <id column="id" property="id"/>
        <result column="code" property="code"/>
        <result column="requisition_id" property="requisitionId"/>
        <result column="requisition_code" property="requisitionCode"/>
        <result column="supplier_id" property="supplierId"/>
        <result column="supplier" property="supplier"/>
        <result column="amount" property="amount"/>
        <result column="purchaser_id" property="purchaserId"/>
        <result column="purchaser" property="purchaser"/>
        <result column="expected_delivery_date" property="expectedDeliveryDate"/>
        <result column="actual_delivery_date" property="actualDeliveryDate"/>
        <result column="status" property="status"/>
        <result column="remark" property="remark"/>
        <result column="create_time" property="createTime"/>
        <result column="update_time" property="updateTime"/>
        <collection property="items" ofType="com.scm.entity.PurchaseOrderItem">
            <id column="item_id" property="id"/>
            <result column="order_id" property="orderId"/>
            <result column="order_code" property="orderCode"/>
            <result column="product_id" property="productId"/>
            <result column="product_name" property="productName"/>
            <result column="product_spec" property="productSpec"/>
            <result column="unit" property="unit"/>
            <result column="quantity" property="quantity"/>
            <result column="price" property="price"/>
            <result column="item_amount" property="amount"/>
            <result column="item_remark" property="remark"/>
            <result column="item_create_time" property="createTime"/>
            <result column="item_update_time" property="updateTime"/>
        </collection>
    </resultMap>

    <sql id="Base_Column_List">
        id, code, requisition_id, requisition_code, supplier_id, supplier, amount, 
        purchaser_id, purchaser, expected_delivery_date, actual_delivery_date, 
        status, remark, create_time, update_time
    </sql>

    <sql id="Item_Column_List">
        poi.id as item_id, poi.order_id, poi.order_code, poi.product_id, poi.product_name,
        poi.product_spec, poi.unit, poi.quantity, poi.price, poi.amount as item_amount,
        poi.remark as item_remark, poi.create_time as item_create_time, poi.update_time as item_update_time
    </sql>

    <insert id="insert" parameterType="com.scm.entity.PurchaseOrder" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO purchase_order (
            code, requisition_id, requisition_code, supplier_id, supplier, amount,
            purchaser_id, purchaser, expected_delivery_date, status, remark,
            create_time, update_time
        ) VALUES (
            #{code}, #{requisitionId}, #{requisitionCode}, #{supplierId}, #{supplier}, #{amount},
            #{purchaserId}, #{purchaser}, #{expectedDeliveryDate}, #{status}, #{remark},
            #{createTime}, #{updateTime}
        )
    </insert>

    <insert id="insertItem" parameterType="com.scm.entity.PurchaseOrderItem" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO purchase_order_item (
            order_id, order_code, product_id, product_name, product_spec,
            unit, quantity, price, amount, remark
        ) VALUES (
            #{orderId}, #{orderCode}, #{productId}, #{productName}, #{productSpec},
            #{unit}, #{quantity}, #{price}, #{amount}, #{remark}
        )
    </insert>

    <insert id="batchInsertItems" parameterType="java.util.List">
        INSERT INTO purchase_order_item (
            order_id, order_code, product_id, product_name, product_spec,
            unit, quantity, price, amount, remark, create_time, update_time
        ) VALUES 
        <foreach collection="items" item="item" separator=",">
        (
            #{item.orderId}, #{item.orderCode}, #{item.productId}, #{item.productName}, #{item.productSpec},
            #{item.unit}, #{item.quantity}, #{item.price}, #{item.amount}, #{item.remark},
            #{item.createTime}, #{item.updateTime}
        )
        </foreach>
    </insert>

    <update id="update" parameterType="com.scm.entity.PurchaseOrder">
        UPDATE purchase_order
        SET supplier_id = #{supplierId},
            supplier = #{supplier},
            amount = #{amount},
            expected_delivery_date = #{expectedDeliveryDate},
            status = #{status},
            remark = #{remark}
        WHERE id = #{id}
    </update>

    <update id="updateItem" parameterType="com.scm.entity.PurchaseOrderItem">
        UPDATE purchase_order_item
        SET quantity = #{quantity},
            price = #{price},
            amount = #{amount},
            remark = #{remark}
        WHERE id = #{id}
    </update>

    <delete id="deleteById">
        DELETE FROM purchase_order WHERE id = #{id}
    </delete>

    <delete id="deleteItemsByOrderId">
        DELETE FROM purchase_order_item WHERE order_id = #{orderId}
    </delete>

    <select id="selectById" resultMap="BaseResultMap">
        SELECT 
            po.id, po.code, po.requisition_id, po.requisition_code, 
            po.supplier_id, po.supplier, po.amount,
            po.purchaser_id, po.purchaser, po.expected_delivery_date, 
            po.actual_delivery_date, po.status, po.remark, 
            po.create_time, po.update_time,
            poi.id as item_id, poi.order_id, poi.order_code,
            poi.product_id, poi.product_name, poi.product_spec,
            poi.unit, poi.quantity, poi.price, 
            poi.amount as item_amount,
            poi.remark as item_remark,
            poi.create_time as item_create_time,
            poi.update_time as item_update_time
        FROM purchase_order po
        LEFT JOIN purchase_order_item poi ON po.id = poi.order_id
        WHERE po.id = #{id}
    </select>

    <select id="selectByCode" resultMap="BaseResultMap">
        SELECT 
            po.<include refid="Base_Column_List"/>,
            <include refid="Item_Column_List"/>
        FROM purchase_order po
        LEFT JOIN purchase_order_item poi ON po.id = poi.order_id
        WHERE po.code = #{code}
    </select>

    <select id="selectItemsByOrderId" resultType="com.scm.entity.PurchaseOrderItem">
        SELECT id, order_id, order_code, product_id, product_name, product_spec,
               unit, quantity, price, amount, remark, create_time, update_time
        FROM purchase_order_item
        WHERE order_id = #{orderId}
    </select>

    <select id="selectList" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM purchase_order
        <where>
            <if test="code != null and code != ''">
                AND code LIKE CONCAT('%', #{code}, '%')
            </if>
            <if test="supplier != null and supplier != ''">
                AND supplier LIKE CONCAT('%', #{supplier}, '%')
            </if>
            <if test="status != null and status != ''">
                AND status = #{status}
            </if>
        </where>
        ORDER BY create_time DESC
        LIMIT #{offset}, #{limit}
    </select>

    <select id="selectCount" resultType="int">
        SELECT COUNT(*)
        FROM purchase_order
        <where>
            <if test="code != null and code != ''">
                AND code LIKE CONCAT('%', #{code}, '%')
            </if>
            <if test="supplier != null and supplier != ''">
                AND supplier LIKE CONCAT('%', #{supplier}, '%')
            </if>
            <if test="status != null and status != ''">
                AND status = #{status}
            </if>
        </where>
    </select>

    <select id="selectCountByDateRange" resultType="int">
        SELECT COUNT(*)
        FROM purchase_order
        WHERE create_time BETWEEN #{startTime} AND #{endTime}
    </select>

    <update id="updateStatus">
        UPDATE purchase_order SET status = #{status}, update_time = NOW() WHERE id = #{id}
    </update>

    <select id="selectAvailableForInbound" resultMap="BaseResultMap">
        SELECT DISTINCT
            po.id, po.code, po.requisition_id, po.requisition_code,
            po.supplier_id, po.supplier, po.amount, po.purchaser_id,
            po.purchaser, po.expected_delivery_date, po.actual_delivery_date,
            po.status, po.remark, po.create_time, po.update_time
        FROM purchase_order po
        WHERE po.status = 'confirmed' 
        AND po.id NOT IN (
            SELECT DISTINCT order_id 
            FROM purchase_inbound 
            WHERE status != 'cancelled'
        )
        ORDER BY po.create_time DESC
    </select>
</mapper> 